$[ language java ]
$[ domain Controller 
   D summary "This template creates a Controller class that is specifically for a release delta endpoint." 
   D "This template creates a Controller class that is specifically for a release delta endpoint." 
   D "A release delta is basically the difference between two releases but constructed in such a" 
   D "way that the receiver of the data return can construct a new release from an old release" 
   D "without all of the new release being provided." ]

$[ function makeReleaseDeltaController
   (entity
    D "The entity that is tagged as the release delta entity.",
    domain
    D "The controller domain.",
    space
    D "The space of the application.",
    role
    D "The role required to create release deltas."
   ) 
       import "doc/SourceHeaders" 
       let exceptionNamespace = (space.domain("Exception")).namespace 
       let utilsNamespace = (space.domain("Utils")).namespace 
       let domainModule = entity.module|domain:Controller 
       let className = entity|domain:Controller|name 
       let modelName = entity|domain:Model|name 
       let serviceClassName = entity|domain:Service|name 
       let protobufClassName = entity|domain:ProtobufDTO|name 
       capture fullProtobufClassName ]${entity.module|domain:ProtobufDTO|name}.${protobufClassName}$[ endcapture 
       let protobufNamespace = (space.domain("ProtobufDTO")).namespace 
       file domain.namespace|path entity|domain:Controller|name "java" 
           call entityHeader(title: "This Controller class is responsible for implementing the API endpoints related to the following release delta entity.") ]
package ${domain.namespace};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.HttpStatus;
import org.springframework.web.multipart.MultipartFile;
import javax.annotation.PostConstruct;

import ${exceptionNamespace}.ServiceException;
import ${utilsNamespace}.AuthConstraints;

import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import ${entity|domain:JSONDTO|fullname};
import ${entity|domain:Service|fullname};
import ${protobufNamespace}.${entity.module.name|capitalize};

@RestController
@RequestMapping(value = "/${entity|domain:APIPath|name}")
public class ${className} {

        $[ let service = entity|domain:Service|name|uncapitalize ]
    private final ${serviceClassName} ${service};

    @Autowired
    public ${className}(${serviceClassName} ${service}) {
        this.${service} = ${service};
    }

    @RequestMapping(
        method = RequestMethod.GET,
        produces = "application/json"
    )
    @PreAuthorize("hasRole('" + AuthConstraints.AUTHENTICATED_USER + "')")
    public ${entity|domain:JSONDTO|name} getReleaseDeltaJson(
        @RequestParam("fromReleaseId") String fromReleaseId,
        @RequestParam("toReleaseId") String toReleaseId) throws ServiceException {
        return ${service}.getReleaseDeltaDto(UUID.fromString(fromReleaseId), UUID.fromString(toReleaseId));
    }

    @RequestMapping(
        method = RequestMethod.GET,
        produces = "application/x-protobuf-lite"
    )
    @PreAuthorize("hasRole('" + AuthConstraints.AUTHENTICATED_USER + "')")
    public ${entity.module|domain:ProtobufDTO|name}.${entity|domain:ProtobufDTO|name} getReleaseDeltaProtobuf(
        @RequestParam("fromReleaseId") String fromReleaseId,
        @RequestParam("toReleaseId") String toReleaseId) throws ServiceException {
        return ${service}.getReleaseDeltaProtobuf(UUID.fromString(fromReleaseId), UUID.fromString(toReleaseId));
    }
}
    $[ endfile 
   endfunction 
   foreach space.modules 
       if module.isIncluded ]$[ continue ]$[ endif 
       foreach module.entities 
           if entity.module.isIncluded ]$[ continue ]$[ endif 
           let isReleaseDelta = entity.isTransient && entity.hasTag("release:delta") 
           if !isReleaseDelta ]$[ continue ]$[ endif 
           call makeReleaseDeltaController(role: role, domain: domain, entity: entity, space: space) 
       endforeach    /* entity */ 
   endforeach    /* module */ ]