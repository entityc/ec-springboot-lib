$[D summary, main "This contains an author that generates code for endpoints that support uploading digital"]
$[D summary, main "assets."]

$[function assetUpload
  D "This function generates controller code for either a single file upload or a collection of"
  D "asset files" 
  (entity
   D "The entity corresponding to the asset." ,
   collectionAttribute
   D "An optional attribute that corresponds to an asset collection." ,
   attribute
   D "The attribute that represents a singla asset." ,
   role
   D "A string representing the role required to conduct this create operation." ,
   service
   D "The name of the code variable for the object of the Service class that has the delegated create"
   D "function." 
  )
]
$[send imports]
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RequestMethod;
import java.io.IOException;
$[/send]
    $[let assetPath = attribute|domain:APIPath|name]
    $[let hasCollection = collectionAttribute != null]
    $[if hasCollection]
        $[let collectionName = collectionAttribute|domain:Model|name]
        $[capture assetPath]${collectionAttribute|domain:APIPath|name}/${attribute|domain:APIPath|name}$[/capture]
    $[/if]
    $[let methodName = attribute|domain:Model|name|capitalize]
    $[if hasCollection]
        $[capture methodName]${collectionName|capitalize}${methodName}$[/capture]
    $[/if]
    $[publisher org.entitycompiler.springboot.controller.assetUpload
      D "Asset upload endpoints."
    ]
    @RequestMapping(
        path = "/{id}/form/${assetPath}/{ext}",
        method = RequestMethod.POST
    )
    @ResponseStatus(HttpStatus.ACCEPTED)
$[outlet annotation
  D "Resides just above the method declaration in the annocation area."
]
$[/outlet]
    public void upload${methodName}(@PathVariable("id") UUID id,
                                @PathVariable("ext") String extension,
                                @RequestPart(value = "file") MultipartFile file
                                ) throws ServiceException {
        $[let modelName = entity|domain:Model|name]
        $[let modelVariableName = modelName|uncapitalize]
        ${modelName} ${modelVariableName};
        try {
            ${modelVariableName} = ${service}.get${modelName}ById(id);
        } catch (EntityNotFoundException e) {
            throw new ValidationException("Could not find ${modelName} by its id: " + id);
        }
        byte[] byteArray;
        try {
            byteArray = file.getBytes();
        } catch (IOException e) {
        $[let exceptionText = attribute|domain:Model|name|words|lowercase]
        $[if hasCollection]
            $[capture exceptionText]${exceptionText} of collection ${collectionName|words|lowercase}$[/capture]
        $[/if]
            throw new ValidationException("Could not read uploaded file for ${modelName} ${exceptionText}.");
        }

        ${service}.upload${methodName}(${modelVariableName}, file.getContentType(), byteArray, extension);
    }

    @RequestMapping(
        path = "/{id}/file/${assetPath}/{ext}",
        method = RequestMethod.POST,
        consumes = "${attribute.contentType}"
    )
    @ResponseStatus(HttpStatus.ACCEPTED)
$[outlet annotation
  D "Resides just above the method declaration in the annocation area."
]
$[/outlet]
    public void upload${methodName}Raw(@PathVariable("id") UUID id,
                                @PathVariable("ext") String extension,
                                @RequestBody byte[] byteArray
                                ) throws ServiceException {
        ${modelName} ${modelVariableName};
        try {
            ${modelVariableName} = ${service}.get${modelName}ById(id);
        } catch (EntityNotFoundException e) {
            throw new ValidationException("Could not find ${modelName} by its id: " + id);
        }

        ${service}.upload${methodName}(${modelVariableName}, "${attribute.contentType}", byteArray, extension);
    }
    $[/publisher]
$[/function]

$[author to org.entitycompiler.springboot.controller]
    $[author to outlet methods D "Adds asset upload endpoints to controller."]
        $[foreach entity.attributes]
            $[if attribute.secondaryEntityIsTagged("asset:collection")]
                $[let secondaryAttributeEntity = attribute.getTypeEntity()]
                $[foreach secondaryAttribute in secondaryAttributeEntity.attributes]
                    $[call assetUpload(role:role,collectionAttribute:attribute,service:service,attribute:secondaryAttribute,entity:entity)]

                $[/foreach]
            $[elseif attribute.secondaryEntityIsTagged("asset:file")]
                $[call assetUpload(role:role,collectionAttribute:null,service:service,attribute:attribute,entity:entity)]

            $[/if]
        $[/foreach]
    $[/author]
$[/author]
