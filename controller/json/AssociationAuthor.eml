$[ D summary, main "Contains an author used to generate code related to creating associations between objects." ]
$[ import "util/AutoWired" ]

$[ author to org.entityc.springboot.controller ]
    $[ author to outlet methods
       D "Adds an associatedTo... endpoint to the controller."
    ]
        $[ call CheckIfReleasedEntity(entity: entity)->(isReleasedEntity: isReleasedEntity) ]
        $[ call GetReleaseEntityPKAttribute(entity: entity)->(releaseEntityPKAttribute: releaseEntityPKAttribute) ]
        $[ foreach relationship in entity.implicitRelationships ]
            $[ if relationship.to.entity.hasTag("internal:many-to-many") ]
                $[ let manyToManyEntity = relationship.to.entity ]
                $[ let toMMEntity = null ]
                $[ foreach mmRel in manyToManyEntity.implicitRelationships ]
                    $[ if mmRel.to.entity.name != entity.name ]
                        $[ let toMMEntity = mmRel.to.entity ]
                        $[ break ]
                    $[/ if ]
                $[/ foreach ]
                $[ let fromService = entity|domain:Service|name|uncapitalize ]
                $[ let fromModelName = entity|domain:Model|name ]
                $[ let fromDtoName = entity|domain:JSONDTO|name ]
                $[ let fromPKType = entity.pkType|language ]
                $[ let fromPKVarName = entity.primaryKeyAttribute|domain|name ]
                $[ let toModelName = toMMEntity|domain:Model|name ]
                $[ let toDtoName = toMMEntity|domain:JSONDTO|name ]
                $[ let toPKType = toMMEntity.pkType|language ]
                $[ let toPKMethName = toMMEntity.primaryKeyAttribute|domain:Model|name|capitalize ]
                $[ call addAutoWired(domainEntity: toMMEntity|domain:DTOMapper) ]
$[ send imports ]
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMethod;
import ${toMMEntity|domain:Model|fullname};
import ${toMMEntity|domain:JSONDTO|fullname};
$[/ send ]
                $[ publisher org.entityc.springboot.controller.associate
                   D "Associate endpoint"
                ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
            path = "${toMMEntity|domain:APIPath|name}/{id}",
            method = RequestMethod.GET,
            produces = "application/json"
    )
    @ResponseStatus(HttpStatus.ACCEPTED)
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public ResponseEntity<List<${fromDtoName}>> get${fromModelName}ListAssociatedWith${toModelName}(@PathVariable("id") UUID id,
                $[ if isReleasedEntity ]
            @RequestParam(value = "releaseId", required = true) ${releaseEntityPKAttribute.type|language} releaseId,
                $[/ if ]
            @RequestParam(value = "start", required = false) Integer start,
            @RequestParam(value = "limit", required = false) Integer limit,
            @RequestParam(value = "levels", required = false) Integer levels
            ) throws ServiceException {
        final int queryStart = ResourceUtils.defaultTo(start, 0);
        final int queryLimit = ResourceUtils.defaultTo(limit, 10);
        final int queryLevels = ResourceUtils.defaultTo(levels, 5);
        List<${fromDtoName}> results = ${fromService}.get${fromDtoName}ListAssociatedWith${toModelName}($[ if isReleasedEntity ]releaseId, $[/ if ]id, queryStart, queryLimit, queryLevels);
        HttpHeaders headers = new HttpHeaders();
        headers.add("X-Total-Count", "" + results.size());
        headers.add("Access-Control-Expose-Headers", "X-Total-Count");
        return new ResponseEntity(results, headers, HttpStatus.OK);
    }

$[* Composite entities can't be associated. *]
        $[ if isReleasedEntity ]
            $[ continue ]
        $[/ if ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
            path = "{id}/${toMMEntity|domain:APIPath|name}/{to_id}",
            method = RequestMethod.POST,
            consumes = "application/json"
    )
    @ResponseStatus(HttpStatus.ACCEPTED)
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public void associateTo${toModelName}(@PathVariable("id") UUID id, @PathVariable("to_id") UUID to_id) throws ServiceException {
        ${service}.associateTo${toModelName}(id, to_id);
    }

    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
            path = "{id}/${toMMEntity|domain:APIPath|name}/{toId}",
            method = RequestMethod.DELETE
    )
    @ResponseStatus(HttpStatus.ACCEPTED)
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public void unassociateTo${toModelName}(@PathVariable("id") UUID id, @PathVariable("toId") UUID toId) throws ServiceException {
        ${service}.unassociateTo${toModelName}(id, toId);
    }

    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
            path = "{id}/${toMMEntity|domain:APIPath|name}/all",
            method = RequestMethod.DELETE
    )
    @ResponseStatus(HttpStatus.ACCEPTED)
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public void unassociateAll${toModelName}(@PathVariable("id") UUID id) throws ServiceException {
        ${service}.unassociateAll${toModelName}(id);
    }

                $[/ publisher ]
            $[/ if ]
        $[/ foreach ]
    $[/ author ]
$[/ author ]