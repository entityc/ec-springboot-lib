$[ language java ]
$[ D summary, main "This contains an author that generates various get endpoint methods for a controller class." ]
$[ import "release/ReleaseFunctions" ]

$[ author to org.entityc.springboot.controller ]
    $[ author to outlet methods
       D "Adds get endpoints to the controller class for its entity."
    ]
        $[ let defaultStart = 0 ]
        $[ let defaultLimit = 10 ]
        $[ let defaultLevels = 5 ]
$[ send imports ]
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.HttpStatus;
$[/ send ]
        $[ publisher org.entityc.springboot.controller.getById
           D "Get by ID endpoint"
        ]
            $[ if entity.hasPrimaryKey ]
                $[ call CheckIfReleasedEntity(entity: entity)->(isReleasedEntity: isReleasedEntity, releaseEntityPKAttribute: releaseEntityPKAttribute) ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
        path = "/{id}",
        method = RequestMethod.GET,
        produces = "application/json"
    )
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public ${dtoClassName} get${modelName}ById(
                $[ if isReleasedEntity ]
        @RequestParam(value = "releaseId", required = true) ${releaseEntityPKAttribute.type|language} releaseId,
                $[/ if ]
        @PathVariable("id") ${entity.pkType|language} id,
        @RequestParam(value = "levels", required = false) Integer levels
    ) throws ServiceException {
        return ${service}.get${entity|domain:JSONDTO|name|capitalize}ById($[ if isReleasedEntity ]releaseId, $[/ if ]id,  ResourceUtils.defaultTo(levels, ${defaultLevels}));
    }

            $[/ if ]
        $[/ publisher ]

$[**********************************
          * GET (full) LIST
          **********************************]
        $[ publisher org.entityc.springboot.controller.getList
           D "Get List endpoint"
        ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
        method = RequestMethod.GET,
        produces = "application/json"
    )
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public ResponseEntity<List<${dtoClassName}>> get${modelName}List(
            $[ if isReleasedEntity ]
        @RequestParam(value = "releaseId", required = true) ${releaseEntityPKAttribute.type|language} releaseId,
            $[/ if ]
            $[ let hasParentId = entity.hasPrimaryParentRelationship ]
            $[ if hasParentId ]
                $[ let relationship = entity.primaryParentRelationship ]
                $[ let parentEntity = relationship.to.entity ]
                $[ capture parentId ]${relationship|domain:Model|name}Id$[/ capture ]
                $[ let isNativeId = true ]
                $[ switch parentEntity.primaryKey.type ]
                    $[ case uuid ]$[ capture parentIdArg ]UUID.fromString(${parentId})$[/ capture ]$[ let parentIdType = "String" ]$[ let isNativeId = false ]
                    $[ default ]$[ capture parentIdArg ]${parentId}$[/ capture ]$[ let parentIdType = parentEntity.primaryKey.type|language ]
                $[/ switch ]
                $[ capture parentName ]${relationship.name|capitalize}$[/ capture ]
        @RequestParam(value = "${parentId}", required = false) ${parentIdType} ${parentId},
            $[/ if ]
$[ outlet parameters
   D "This is where you want to include request parameters on the get<Model>List endpoint."
]
$[/ outlet ]
        @RequestParam(value = "start", required = false) Integer start,
        @RequestParam(value = "limit", required = false) Integer limit,
        @RequestParam(value = "levels", required = false) Integer levels)
        throws ServiceException {
$[ outlet declarations
   D "This is where you want to include variable declarations."
]
$[/ outlet ]
        final int queryStart = ResourceUtils.defaultTo(start, ${defaultStart});
        final int queryLimit = ResourceUtils.defaultTo(limit, ${defaultLimit});
        final int queryLevels = ResourceUtils.defaultTo(levels, ${defaultLevels});
        List<${dtoClassName}> results = null;
            $[ let indent = hasParentId ? "    ":"" ]
            $[ if hasParentId ]
        if (${parentId} != ${isNativeId ? "0":"null"}) {
$[ outlet parentGet ]
            results = ${service}.get${entity|domain:JSONDTO|name|capitalize}ListBy${parentName}($[ if isReleasedEntity ]releaseId, $[/ if ]${parentIdArg}, queryStart, queryLimit, queryLevels);
$[/ outlet ]
        } else {
            $[/ if ]
$[ outlet noParentGet ]
        ${indent}results = ${service}.get${entity|domain:JSONDTO|name|capitalize}List($[ if isReleasedEntity ]releaseId, $[/ if ]queryStart, queryLimit, ResourceUtils.defaultTo(levels, ${defaultLevels}));
$[/ outlet ]
            $[ if hasParentId ]
        }
            $[/ if ]
        HttpHeaders headers = new HttpHeaders();
        headers.add("X-Total-Count", "" + results.size());
        headers.add("Access-Control-Expose-Headers", "X-Total-Count");
        return new ResponseEntity(results, headers, HttpStatus.OK);
    }

        $[/ publisher ]
$[**********************************
          * GET LIST BY ATTRIBUTE
          **********************************]
        $[ publisher org.entityc.springboot.controller.getListByAttribute
           D "Get List by Attribute Endpoint"
        ]
            $[ foreach attribute in entity.attributes ]
                $[ if attribute.isParent && !attribute.isSequential ]
                    $[ if attribute.type.isEnumType ]
$[ send imports ]
import ${attribute.type|domain:Model|fullname};
$[/ send ]
                    $[/ if ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
        path = "/${attribute|domain:APIPath|name}/{value}",
        method = RequestMethod.GET,
        produces = "application/json"
    )
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public ResponseEntity<List<${dtoClassName}>> get${modelName}ListBy${attribute.name|capitalize}(
                    $[ if isReleasedEntity ]
        @RequestParam(value = "releaseId", required = true) ${releaseEntityPKAttribute.type|language} releaseId,
                    $[/ if ]
        @PathVariable("value") ${attribute.type|language} value,
        @RequestParam(value = "start", required = false) Integer start,
        @RequestParam(value = "limit", required = false) Integer limit,
        @RequestParam(value = "levels", required = false) Integer levels)
        throws ServiceException {
        final int queryStart = ResourceUtils.defaultTo(start, ${defaultStart});
        final int queryLimit = ResourceUtils.defaultTo(limit, ${defaultLimit});
        final int queryLevels = ResourceUtils.defaultTo(levels, ${defaultLevels});
        List<${dtoClassName}> results = ${service}.get${entity|domain:JSONDTO|name|capitalize}ListBy${attribute.name|capitalize}($[ if isReleasedEntity ]releaseId, $[/ if ]value, queryStart, queryLimit, queryLevels);
        HttpHeaders headers = new HttpHeaders();
        headers.add("X-Total-Count", "" + results.size());
        headers.add("Access-Control-Expose-Headers", "X-Total-Count");
        return new ResponseEntity(results, headers, HttpStatus.OK);
    }

                $[/ if ]
            $[/ foreach ]
        $[/ publisher ]
$[**********************************
          * GET LIST BY RELATIONSHIP
          **********************************]
        $[ publisher org.entityc.springboot.controller.getListByRelationship
           D "Get List by Relationship Endpoint"
        ]
            $[ foreach relationship in entity.relationships ]
                $[ let toEntity = relationship.to.entity ]
                $[ if toEntity == null ]$[ continue ]$[/ if ]
                $[ if toEntity == null || toEntity.hasTag("release:top") ]$[ continue ]$[/ if ]
                $[ if relationship.isParent ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
        path = "/${relationship|domain:APIPath|name}/{id}",
        method = RequestMethod.GET,
        produces = "application/json"
    )
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public ResponseEntity<List<${dtoClassName}>> get${modelName}ListBy${relationship.name|capitalize}(
                    $[ if isReleasedEntity ]
        @RequestParam(value = "releaseId", required = true) ${releaseEntityPKAttribute.type|language} releaseId,
                    $[/ if ]
        @PathVariable("id") ${relationship.to.entity.primaryKey.type|language} ${relationship.name}Id,
        @RequestParam(value = "start", required = false) Integer start,
        @RequestParam(value = "limit", required = false) Integer limit,
        @RequestParam(value = "levels", required = false) Integer levels)
        throws ServiceException {
        final int queryStart = ResourceUtils.defaultTo(start, ${defaultStart});
        final int queryLimit = ResourceUtils.defaultTo(limit, ${defaultLimit});
        final int queryLevels = ResourceUtils.defaultTo(levels, ${defaultLevels});
        List<${dtoClassName}> results = ${service}.get${entity|domain:JSONDTO|name|capitalize}ListBy${relationship.name|capitalize}($[ if isReleasedEntity ]releaseId, $[/ if ]${relationship.name}Id, queryStart, queryLimit, queryLevels);
        HttpHeaders headers = new HttpHeaders();
        headers.add("X-Total-Count", "" + results.size());
        headers.add("Access-Control-Expose-Headers", "X-Total-Count");
        return new ResponseEntity(results, headers, HttpStatus.OK);
    }

                $[/ if ]
            $[/ foreach ]
        $[/ publisher ]
    $[/ author ]
$[/ author ]