$[language java]
$[D summary, main "This contains an author that generates various get endpoint methods for a controller class."]
$[import "security/SecurityFunctions"]

$[author to org.entitycompiler.springboot.controller]
    $[author to outlet methods
    D "Adds get endpoints to the controller class for its entity."]
$[send imports]
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.HttpStatus;
$[/send]
        $[publisher org.entitycompiler.springboot.controller.getById
          D "Get by ID endpoint"
        ]
            $[if entity.hasPrimaryKey]
    @RequestMapping(
        path = "/{id}",
        method = RequestMethod.GET,
        produces = "application/json"
    )
$[outlet annotation
  D "Resides just above the method declaration in the annocation area."
]
$[/outlet]
    public ${dtoClassName} get${modelName}ById(@PathVariable("id") ${entity.pkType|language} id) throws ServiceException {
        return ${service}.get${entity|domain:JSONDTO|name|capitalize}ById(id);
    }

            $[/if]
        $[/publisher]

        $[publisher org.entitycompiler.springboot.controller.getList
          D "Get List endpoint"
        ]
    @RequestMapping(
        method = RequestMethod.GET,
        produces = "application/json"
    )
$[outlet annotation
  D "Resides just above the method declaration in the annocation area."
]
$[/outlet]
    public ResponseEntity<List<${dtoClassName}>> get${modelName}List(
            $[let hasParentId = entity.hasPrimaryParentRelationship]
            $[if hasParentId]
                $[let relationship = entity.primaryParentRelationship]
                $[let parentEntity = relationship.to.entity]
                $[capture parentId]${relationship|domain:Model|name}Id$[/capture]
                $[let isNativeId = true]
                $[switch parentEntity.primaryKey.type]
                    $[case uuid]$[capture parentIdArg]UUID.fromString(${parentId})$[/capture]$[let parentIdType = "String"]$[let isNativeId = false]
                    $[default]$[capture parentIdArg]${parentId}$[/capture]$[let parentIdType = parentEntity.primaryKey.type|language]
                $[/switch]
                $[capture parentName]${relationship.name|capitalize}$[/capture]
        @RequestParam("${parentId}") ${parentIdType} ${parentId},
            $[/if]
            $[let hasLockAttribute = entity.hasAttributeTagged("release:lock")]
            $[if hasLockAttribute]
        @RequestParam("lockedOnly") Boolean lockedOnly,
            $[/if]
        @RequestParam("start") Integer start,
        @RequestParam("limit") Integer limit)
        throws ServiceException {
            $[if hasLockAttribute]
        final boolean queryLockedOnly = ResourceUtils.defaultTo(lockedOnly, true);
            $[/if]
        final int queryStart = ResourceUtils.defaultTo(start, 0);
        final int queryLimit = ResourceUtils.defaultTo(limit, 10);
        List<${dtoClassName}> results = null;
            $[let indent = ""]
            $[if hasParentId]
        if (${parentId} != $[if isNativeId]0$[else]null$[/if]) {
            results = ${service}.get${entity|domain:JSONDTO|name|capitalize}ListBy${parentName}(${parentIdArg}, queryStart, queryLimit, false);
        } else {
                $[let indent = "    "]
            $[/if]
            $[if hasLockAttribute]
        ${indent}results = ${service}.get${entity|domain:JSONDTO|name|capitalize}List(queryLockedOnly, queryStart, queryLimit, false);
            $[else]
        ${indent}results = ${service}.get${entity|domain:JSONDTO|name|capitalize}List(queryStart, queryLimit, false);
            $[/if]
            $[if hasParentId]
        }
            $[/if]
        HttpHeaders headers = new HttpHeaders();
        headers.add("X-Total-Count", "" + results.size());
        headers.add("Access-Control-Expose-Headers", "X-Total-Count");
        return new ResponseEntity(results, headers, HttpStatus.OK);
    }

        $[/publisher]
        $[publisher org.entitycompiler.springboot.controller.getByRelationship
          D "Get List by Relationship Endpoint"
        ]
            $[foreach relationship in entity.relationships]
                $[if relationship.isParent]
    @RequestMapping(
        path = "/${relationship|domain:APIPath|name}/{id}",
        method = RequestMethod.GET,
        produces = "application/json"
    )
$[outlet annotation
  D "Resides just above the method declaration in the annocation area."
]
$[/outlet]
    public ResponseEntity<List<${dtoClassName}>> get${modelName}ListBy${relationship.name|capitalize}(
        @PathVariable("id") ${relationship.to.entity.primaryKey.type|language} ${relationship.name}Id,
        @RequestParam("start") Integer start,
        @RequestParam("limit") Integer limit) throws ServiceException {
        final int queryStart = ResourceUtils.defaultTo(start, 0);
        final int queryLimit = ResourceUtils.defaultTo(limit, 10);
        List<${dtoClassName}> results = ${service}.get${entity|domain:JSONDTO|name|capitalize}ListBy${relationship.name|capitalize}(${relationship.name}Id, queryStart, queryLimit, true);
        HttpHeaders headers = new HttpHeaders();
        headers.add("X-Total-Count", "" + results.size());
        headers.add("Access-Control-Expose-Headers", "X-Total-Count");
        return new ResponseEntity(results, headers, HttpStatus.OK);
    }

                $[/if]
            $[/foreach]
        $[/publisher]
    $[/author]
$[/author]