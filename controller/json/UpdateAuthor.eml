$[ D summary, main "Contains an author that generates update endpoint methods for a controller class." ]
$[ author to org.entityc.springboot.controller ]
    $[ author to outlet methods
       D "Adds update endpoints to the controller class for its entity."
    ]
$[ send imports ]
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
$[/ send ]
        $[ publisher org.entityc.springboot.controller.update ]
            $[ if entity.hasPrimaryKey ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
        path = "/{id}",
        method = RequestMethod.PUT,
        consumes = "application/json",
        produces = "application/json"
    )
    @ResponseStatus(HttpStatus.ACCEPTED)
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
                $[ let pkidtype = entity.pkType|language ]
                $[ let pkidname = entity.primaryKeyAttribute|domain:Model|name|capitalize ]
    public ${dtoClassName} update${modelName}(@PathVariable("id") ${pkidtype} id, @RequestBody ${dtoClassName} requestDto, @AuthenticationPrincipal UserDetails userDetails) throws ServiceException {
$[ outlet insideTop
   D "This outlet is just inside the update endpoint method, the first code to execute. The request"
   D "DTO object is called `requestDto`."
]
$[/ outlet ]
        ${modelName} requestObject = mapper.map(requestDto, ${modelName}.class);
        requestObject.set${pkidname}(id);
        ${modelName} resultObject = ${service}.update${modelName}(requestObject);
        return mapper.map(resultObject, ${dtoClassName}.class);
    }

                $[ if entity.hasAttributeTagged("release:lock") ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
        path = "/{id}/lock",
        method = RequestMethod.PUT,
        consumes = "application/json",
        produces = "application/json"
    )
    @ResponseStatus(HttpStatus.ACCEPTED)
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
                    $[ let pkidtype = entity.pkType|language ]
                    $[ let pkidname = entity.primaryKeyAttribute|domain:Model|name|capitalize ]
    public ${dtoClassName} update${modelName}(@PathVariable("id") ${pkidtype} id) throws ServiceException {
        ${modelName} object = ${service}.get${modelName}ById(id, 0);
        object.set${entity.attributeTagged("release:lock")|domain:Model|name|capitalize}(true);
        ${modelName} resultObject = ${service}.update${modelName}(object);
        return mapper.map(resultObject, ${dtoClassName}.class);
    }

                $[/ if ]
            $[/ if ]
        $[/ publisher ]
    $[/ author ]
$[/ author ]