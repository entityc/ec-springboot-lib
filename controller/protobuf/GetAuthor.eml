$[ language java ]
$[ D summary, main "This contains an author that generates various get endpoint methods for a controller class" ]
$[ D summary, main "based on protobuf requests and responses." ]
$[ import "security/SecurityFunctions" ]

$[ author to org.entityc.springboot.controller.protobuf ]
    $[ author to outlet methods
       D "Adds get endpoints to the controller class for its entity."
    ]
        $[ let protobufNamespace = (space|domain:ProtobufDTO).domain.namespace ]
        $[ capture fullProtobufClassName ]${module.name|capitalize}.${entity|domain:ProtobufDTO|name}$[/ capture ]
$[ send imports ]
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.HttpStatus;
import ${protobufNamespace}.${module.name|capitalize};
$[/ send ]
        $[ publisher org.entityc.springboot.controller.getById
           D "Get by ID endpoint"
        ]
            $[ if entity.hasPrimaryKey ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
        path = "/{id}",
        method = RequestMethod.GET,
        produces = "application/x-protobuf-lite"
    )
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public ${fullProtobufClassName} get${entity|domain:Model|name}PBById(@PathVariable("id") ${entity.pkType|language} id) throws ServiceException {
        return ${service}.get${entity|domain:Model|name|capitalize}PBById(id);
    }

            $[/ if ]
        $[/ publisher ]

        $[ publisher org.entityc.springboot.controller.getList
           D "Get List endpoint"
        ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
        method = RequestMethod.GET,
        produces = "application/x-protobuf-lite"
    )
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public ResponseEntity<${fullProtobufClassName}List> get${entity|domain:Model|name}PBList(
            $[ let hasParentId = entity.hasPrimaryParentRelationship ]
            $[ if hasParentId ]
                $[ let relationship = entity.primaryParentRelationship ]
                $[ let parentEntity = relationship.to.entity ]
                $[ capture parentId ]${relationship|domain:Model|name}Id$[/ capture ]
                $[ let isNativeId = true ]
                $[ switch parentEntity.primaryKey.type ]
                    $[ case uuid ]$[ capture parentIdArg ]UUID.fromString(${parentId})$[/ capture ]$[ let parentIdType = "String" ]$[ let isNativeId = false ]
                    $[ default ]$[ capture parentIdArg ]${parentId}$[/ capture ]$[ let parentIdType = parentEntity.primaryKey.type|language ]
                $[/ switch ]
                $[ capture parentName ]${relationship.name|capitalize}$[/ capture ]
        @RequestParam(value = "${parentId}", required = false) ${parentIdType} ${parentId},
            $[/ if ]
$[ outlet parameters
   D "This is where you want to include request parameters on the get<Model>List endpoint."
]
$[/ outlet ]
        @RequestParam(value = "start", required = false) Integer start,
        @RequestParam(value = "limit", required = false) Integer limit)
        throws ServiceException {
$[ outlet declarations
   D "This is where you want to include variable declarations."
]
$[/ outlet ]
        final int queryStart = ResourceUtils.defaultTo(start, 0);
        final int queryLimit = ResourceUtils.defaultTo(limit, 10);
        ${fullProtobufClassName}List results = null;
            $[ let indent = hasParentId ? "    ":"" ]
            $[ if hasParentId ]
        if (${parentId} != ${isNativeId ? "0":"null"}) {
            results = ${service}.get${modelName|capitalize}PBListBy${parentName}(${parentIdArg}, queryStart, queryLimit, false);
        } else {
            $[/ if ]
        ${indent}results = ${service}.get${modelName|capitalize}PBList(queryStart, queryLimit, false);
            $[ if hasParentId ]
        }
            $[/ if ]
        HttpHeaders headers = new HttpHeaders();
        headers.add("X-Total-Count", "" + results.getItemCount());
        headers.add("Access-Control-Expose-Headers", "X-Total-Count");
        return new ResponseEntity(results, headers, HttpStatus.OK);
    }

        $[/ publisher ]
        $[ publisher org.entityc.springboot.controller.getListByRelationship
           D "Get List by Relationship Endpoint"
        ]
            $[ foreach relationship in entity.relationships ]
                $[ if relationship.isParent ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    @RequestMapping(
        path = "/${relationship|domain:APIPath|name}/{id}",
        method = RequestMethod.GET,
        produces = "application/x-protobuf-lite"
    )
$[ outlet annotation
   D "Resides just above the method declaration in the annocation area."
]
$[/ outlet ]
    public ResponseEntity<${fullProtobufClassName}List> get${entity|domain:Model|name}PBListBy${relationship.name|capitalize}(
        @PathVariable("id") ${relationship.to.entity.primaryKey.type|language} ${relationship.name}Id,
        @RequestParam(value = "start", required = false) Integer start,
        @RequestParam(value = "limit", required = false) Integer limit)
        throws ServiceException {
        final int queryStart = ResourceUtils.defaultTo(start, 0);
        final int queryLimit = ResourceUtils.defaultTo(limit, 10);
        ${fullProtobufClassName}List results = ${service}.get${entity|domain:Model|name|capitalize}PBListBy${relationship.name|capitalize}(${relationship.name}Id, queryStart, queryLimit, true);
        HttpHeaders headers = new HttpHeaders();
        headers.add("X-Total-Count", "" + results.getItemCount());
        headers.add("Access-Control-Expose-Headers", "X-Total-Count");
        return new ResponseEntity(results, headers, HttpStatus.OK);
    }

                $[/ if ]
            $[/ foreach ]
        $[/ publisher ]
    $[/ author ]
$[/ author ]