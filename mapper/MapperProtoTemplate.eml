$[ language java ]
$[ domain DTOMapper 
   import "release/ReleaseFunctions" ]

$[ author to org.entityc.springboot.mapper 
       author to outlet methods 
           if space.hasDomain("ProtobufDTO") && !(module|domain:ProtobufDTO).hasTag("noproto") ]

            $[ let protobufNamespace = (space.domain("ProtobufDTO")).namespace 
   send imports ]
import com.google.protobuf.ByteString;
import org.springframework.beans.factory.annotation.Autowired;
import org.modelmapper.ModelMapper;
import ${protobufNamespace}.${module.name|capitalize};
$[ endsend 
               foreach entity.attributes 
                   if attribute.type.isEnumType 
   send imports ]
import ${protobufNamespace}.${attribute.type.module|domain:ProtobufDTO|name};
$[ endsend 
                   endif 
               endforeach 
               capture fullProtobufClassName ]${module.name|capitalize}.${entity|domain:ProtobufDTO|name}$[ endcapture 
               /********************************************************************
    PROTOBUF <== MODEL
  ********************************************************************/ ]
    public ${fullProtobufClassName} toProtobufFromModel(${modelDomainEntity.name} modelObject) {
        ${fullProtobufClassName}.Builder builder = ${fullProtobufClassName}.newBuilder();

            $[ if entity.hasPrimaryKey 
                   switch entity.primaryKey.type 
                       case uuid ]$[ let ending = ".toString()" 
                       default ]$[ let ending = "" 
                   endswitch ]
        // primary key
        builder.set${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}(modelObject.get${entity.primaryKeyAttribute|domain:Model|name|capitalize}()${ending});

            $[ endif 
               let showAttributeComment = true 
               foreach attribute in entity.attributes|sort if !attribute.isVirtual && !(attribute|domain:DTOMapper).hasTag("exclude") 
                   let nullable = attribute.type|language hasNullable 
                   let attributeType = attribute.type 
                   if attribute.isSecondaryEntityType 
                       let attributeType = attribute.getTypeEntity() 
                       let nullable = true 
                   endif 
                   if showAttributeComment 
                       let showAttributeComment = false ]
        // attributes
                $[ endif 
                   let indent = "" 
                   let modelAttributeNameInMethod = attribute|domain:Model|name|capitalize 
                   let protobufAttributeNameInMethod = attribute|domain:ProtobufDTO|name|capitalize 
                   if nullable 
                       let indent = "    " ]
        if (modelObject.get${modelAttributeNameInMethod}() != null) {
                $[ endif 
                   if attribute.type.isAssetType ]
        ${indent}builder.set${protobufAttributeNameInMethod}(modelObject.${getname}${modelAttributeNameInMethod}Url());
                $[ elseif attribute.isArray 
                       if attribute.type.isEnumType 
                           if attribute.type.isExtern ]
                        // extern ${attribute.type.module|domain:ProtobufDTO|name}
                        $[ endif 
                           let methodName = "getProtobufValue" 
                           capture entityScope ]$[ if attribute.type.hasParentEntity ]${attribute.type.parentEntity|domain:ProtobufDTO|name}.$[ endif ]$[ endcapture ]
        ${indent}builder.addAll${protobufAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}().stream().map(s -> ${attribute.type.module|domain:ProtobufDTO|name}.${entityScope}${attribute.type|domain:ProtobufDTO|name}.valueOf(s.${methodName}())).collect(Collectors.toSet()));
                    $[ elseif attribute.type.isEntityType 
                           let localMapperClassName = attributeType|domain:DTOMapper|name ]
        ${indent}${localMapperClassName} localMapper = new ${localMapperClassName}();
        ${indent}for (${attributeType|domain:Model|name} obj :  modelObject.get${modelAttributeNameInMethod}()) {
        ${indent}    builder.add${modelAttributeNameInMethod}(localMapper.toProtobufFromModel(obj));
        ${indent}}
                    $[ else ]
        ${indent}builder.addAll${protobufAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}());
                    $[ endif 
                   else    /* !attribute.isArray */ 
                       if attribute.type.isEntityType 
   send mapperDecl 
                               let localMapperClassName = attributeType|domain:DTOMapper|name ]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[ endsend ]
        ${indent}builder.set${protobufAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toProtobufFromModel(modelObject.get${modelAttributeNameInMethod}()));
                    $[ elseif attribute.type.isEnumType 
                           capture entityScope ]$[ if attribute.type.hasParentEntity ]${attribute.type.parentEntity|domain:ProtobufDTO|name}.$[ endif ]$[ endcapture 
                           let methodName = "getProtobufValue" ]
        ${indent}builder.set${protobufAttributeNameInMethod}(${attribute.type.module|domain:ProtobufDTO|name}.${entityScope}${attribute.type|domain:ProtobufDTO|name}.valueOf(modelObject.get${modelAttributeNameInMethod}().${methodName}()));
                    $[ else    /* !attribute.type.isEnumType */ 
                           /* we need to consider the data type here */ 
                           capture ending ]$[ endcapture 
                           capture beginning ]$[ endcapture 
                           capture getname ]get$[ endcapture 
                           switch attribute.type 
                               case date ]$[ capture ending ].getTime()$[ endcapture 
                               case boolean ]$[ capture ending ]$[ endcapture ]$[ capture getname ]get$[ endcapture ]$[ case byte ]$[ capture beginning ]ByteString.copyFrom($[ endcapture ]$[ capture ending ])$[ endcapture ]$[ case uuid ]$[ capture ending ].toString()$[ endcapture 
                               default ]$[ capture ending ]$[ endcapture 
                           endswitch ]
        ${indent}builder.set${attribute|domain:ProtobufDTO|name|capitalize}(${beginning}modelObject.${getname}${attribute|domain:Model|name|capitalize}()${ending});
                    $[ endif 
                   endif 
                   if nullable ]
        }
                $[ endif 
               endforeach    /* attribute */ 
               /** RELATIONSHIPS **/ 
               let showRelationshipComment = true 
               foreach relationship in entity.relationships 
                   let toEntity = relationship.to.entity 
                   if toEntity == null || toEntity.hasTag("release:top") ]$[ continue ]$[ endif 
                   if relationship.to.isOne 
                       let isSelf = toEntity.name == entity.name 
                       let includeChildEntities = toEntity.space.name == entity.space.name && !toEntity.isIncluded 
                       if !includeChildEntities ]$[ continue ]$[ endif 
                       if showRelationshipComment ]
        // relationships
                        $[ let showRelationshipComment = false 
                       endif 
                       let toEntityMapperClassName = toEntity|domain:DTOMapper|name 
                       let toEntityMapperVariableName = toEntityMapperClassName|uncapitalize 
                       if isSelf 
                           let toEntityMapperVariableName = "this" 
                       else 
   send mapperDecl ]
    @Autowired ${toEntityMapperClassName} ${toEntityMapperVariableName};
$[ endsend 
   send imports ]
import ${toEntity|domain:Model|fullname};
$[ endsend 
                       endif ]
        if (modelObject.get${relationship|domain:Model|name|capitalize}Id() != null) {
            ${toEntity|domain:Model|name} refObject = new ${toEntity|domain:Model|name}();
            refObject.set${toEntity.primaryKeyAttribute|domain:Model|name|capitalize}(modelObject.get${relationship|domain:Model|name|capitalize}Id());
            builder.set${relationship|domain:ProtobufDTO|name|capitalize}(${toEntityMapperVariableName}.toProtobufFromModel(refObject));
        }
$[ send imports ]
import ${protobufNamespace}.${toEntity.module.name|capitalize};
$[ endsend 
                   endif 
               endforeach ]
        return (${fullProtobufClassName})builder.build();
    }

            $[ /********************************************************************
    PROTOBUF <== JSONDTO
  ********************************************************************/ ]
    public ${fullProtobufClassName} toProtobufFromDto(${dtoDomainEntity.name} dtoObject) {
        ${fullProtobufClassName}.Builder builder = ${fullProtobufClassName}.newBuilder();

            $[ if entity.hasPrimaryKey 
                   switch entity.primaryKey.type 
                       case uuid ]$[ let ending = ".toString()" 
                       default ]$[ let ending = "" 
                   endswitch ]
        // primary key
        builder.set${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}(dtoObject.get${entity.primaryKeyAttribute|domain:JSONDTO|name|capitalize}()${ending});

            $[ endif 
               let showAttributeComment = true 
               foreach attribute in entity.attributes if !attribute.isVirtual && !(attribute|domain:DTOMapper).hasTag("exclude") 
                   let nullable = attribute.type|language hasNullable 
                   let attributeType = attribute.type 
                   if attribute.isSecondaryEntityType 
                       let attributeType = attribute.getTypeEntity() 
                       let nullable = true 
                   endif 
                   if showAttributeComment 
                       let showAttributeComment = false ]
        // attributes
                $[ endif 
                   let indent = "" 
                   let dtoAttributeNameInMethod = attribute|domain:JSONDTO|name|capitalize 
                   let protobufAttributeNameInMethod = attribute|domain:ProtobufDTO|name|capitalize 
                   if nullable 
                       let indent = "    " ]
        if (dtoObject.get${dtoAttributeNameInMethod}() != null) {
                $[ endif 
                   if attribute.type.isAssetType ]
        ${indent}builder.set${protobufAttributeNameInMethod}(dtoObject.${getname}${dtoAttributeNameInMethod}Url());
                $[ elseif attribute.isArray 
                       if attribute.type.isEnumType 
                           capture entityScope ]$[ if attribute.type.hasParentEntity ]${attribute.type.parentEntity|domain:ProtobufDTO|name}.$[ endif ]$[ endcapture ]
        ${indent}builder.addAll${protobufAttributeNameInMethod}(dtoObject.get${dtoAttributeNameInMethod}().stream().map(s -> ${attribute.type.module|domain:ProtobufDTO|name}.${entityScope}${attribute.type|domain:ProtobufDTO|name}.valueOf(s.toString())).collect(Collectors.toSet()));
                    $[ elseif attribute.type.isEntityType 
   send mapperDecl 
                               let localMapperClassName = attributeType|domain:DTOMapper|name ]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[ endsend ]
        ${indent}for (${attributeType|domain:JSONDTO|name} obj :  dtoObject.get${dtoAttributeNameInMethod}()) {
        ${indent}    builder.add${dtoAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toProtobufFromDto(obj));
        ${indent}}
                    $[ else ]
        ${indent}builder.addAll${protobufAttributeNameInMethod}(dtoObject.get${dtoAttributeNameInMethod}());
                    $[ endif 
                   else    /* !attribute.isArray */ 
                       if attribute.type.isEntityType 
   send mapperDecl 
                               let localMapperClassName = attributeType|domain:DTOMapper|name ]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[ endsend ]
        ${indent}builder.set${protobufAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toProtobufFromDto(dtoObject.get${dtoAttributeNameInMethod}()));
                    $[ elseif attribute.type.isEnumType 
                           capture entityScope ]$[ if attribute.type.hasParentEntity ]${attribute.type.parentEntity|domain:ProtobufDTO|name}.$[ endif ]$[ endcapture ]
        ${indent}builder.set${protobufAttributeNameInMethod}(${attribute.type.module|domain:ProtobufDTO|name}.${entityScope}${attribute.type|domain:ProtobufDTO|name}.valueOf(dtoObject.get${dtoAttributeNameInMethod}().toString()));
                    $[ else    /* !attribute.type.isEnumType */ 
                           /* we need to consider the data type here */ 
                           capture ending ]$[ endcapture 
                           capture beginning ]$[ endcapture 
                           capture getname ]get$[ endcapture 
                           switch attribute.type 
                               case date ]$[ capture ending ].getTime()$[ endcapture 
                               case boolean ]$[ capture ending ]$[ endcapture ]$[ capture getname ]get$[ endcapture ]$[ case byte ]$[ capture beginning ]ByteString.copyFrom($[ endcapture ]$[ capture ending ])$[ endcapture ]$[ case uuid ]$[ capture ending ].toString()$[ endcapture 
                               default ]$[ capture ending ]$[ endcapture 
                           endswitch ]
        ${indent}builder.set${attribute|domain:ProtobufDTO|name|capitalize}(${beginning}dtoObject.${getname}${attribute|domain:JSONDTO|name|capitalize}()${ending});
                    $[ endif 
                   endif 
                   if nullable ]
        }
                $[ endif 
               endforeach    /* attribute */ 
               /** RELATIONSHIPS **/ 
               let showRelationshipComment = true 
               call CheckIfReleasedEntity(entity: entity)->(isReleasedEntity: isReleasedEntity) 
               foreach relationship in entity.relationships 
                   let toEntity = relationship.to.entity 
                   if toEntity == null ]$[ continue ]$[ endif 
                   if isReleasedEntity && toEntity.hasTag("release:top") ]$[ continue ]$[ endif 
                   if relationship.to.isOne 
                       let _toEntity = relationship.to.entity 
                       let includeChildEntities = _toEntity.space.name == entity.space.name && !_toEntity.isIncluded 
                       if !includeChildEntities ]$[ continue ]$[ endif 
                       if showRelationshipComment ]
        // relationships
                        $[ let showRelationshipComment = false 
                       endif 
                       let _toEntityMapperClassName = _toEntity|domain:DTOMapper|name 
                       let _toEntityMapperVariableName = _toEntityMapperClassName|uncapitalize 
   send mapperDecl ]
    @Autowired ${_toEntityMapperClassName} ${_toEntityMapperVariableName};
$[ endsend ]
        if (dtoObject.get${relationship|domain:JSONDTO|name|capitalize}() != null) {
            builder.set${relationship|domain:ProtobufDTO|name|capitalize}(${_toEntityMapperVariableName}.toProtobufFromDto(dtoObject.get${relationship|domain:JSONDTO|name|capitalize}()));
        }

                $[ endif 
               endforeach    /* relationship */ ]
        return (${fullProtobufClassName})builder.build();
    }

            $[ /********************************************************************
    MODEL <== PROTOBUF
  ********************************************************************/ ]
    public ${modelDomainEntity|name} toModelFromProtobuf(${fullProtobufClassName} protobufObject) {
        ${modelDomainEntity|name} modelObject = new ${modelDomainEntity|name}();

            $[ if entity.hasPrimaryKey ]
        // primary key
                $[ capture beginning ]$[ endcapture 
                   capture ending ]$[ endcapture 
                   switch entity.pkType 
                       case uuid ]$[ let ending = ")" ]$[ let beginning = "UUID.fromString(" 
                       default 
                   endswitch ]
        if (protobufObject.has${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}()) {
            modelObject.set${entity.primaryKeyAttribute|domain:Model|name|capitalize}(${beginning}protobufObject.get${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}()${ending});
        }
            $[ endif ]

            $[ let showAttributeComment = true 
               foreach attribute in entity.attributes if !attribute.isVirtual && !(attribute|domain:DTOMapper).hasTag("exclude") 
                   let attributeType = attribute.type 
                   if attribute.isSecondaryEntityType 
                       let attributeType = attribute.getTypeEntity() 
                   endif 
                   let indent = "" 
                   let nullable = attribute.type|language hasNullable 
                   if attribute.isArray ]$[ let nullable = false ]$[ endif 
                   let modelAttributeNameInMethod = attribute|domain:Model|name|capitalize 
                   let protobufAttributeNameInMethod = attribute|domain:ProtobufDTO|name|capitalize 
                   if showAttributeComment 
                       let showAttributeComment = false ]
        // attributes
                $[ endif 
                   let indent = "" 
                   if nullable 
                       let indent = "    " ]
        if (protobufObject.has${protobufAttributeNameInMethod}()) {
                $[ endif 
                   if attribute.isArray 
                       if attribute.type.isEnumType 
                           let valueOfMethodName = "protobufValueOf" ]
        ${indent}modelObject.set${modelAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().map(s -> ${attribute.type|domain:Model|name}.${valueOfMethodName}(s.toString())).collect(Collectors.toSet()));
                    $[ elseif attribute.type.isEntityType ]
        {
            ${attribute.type|domain:DTOMapper|name} _mapper = new ${attribute.type|domain:DTOMapper|name}();
            modelObject.set${modelAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().map(s -> _mapper.toModelFromProtobuf(s)).collect(Collectors.toSet()));
        }
                    $[ else ]
        ${indent}modelObject.set${modelAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().collect(Collectors.toSet()));
                    $[ endif 
                   else    /* !attribute.isArray */ 
                       if attribute.type.isEntityType 
                           let localMapperClassName = attributeType|domain:DTOMapper|name 
   send mapperDecl ]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[ endsend ]
        ${indent}modelObject.set${modelAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toModelFromProtobuf(protobufObject.get${protobufAttributeNameInMethod}()));
                    $[ elseif attribute.type.isEnumType 
                           let valueOfMethodName = "protobufValueOf" ]
        ${indent}modelObject.set${modelAttributeNameInMethod}(${attribute.type|domain:Model|name}.${valueOfMethodName}(protobufObject.get${protobufAttributeNameInMethod}().toString()));
                    $[ else    /* !attribute.type.isEnumType */ 
                           /* we need to consider the data type here */ 
                           capture beginning ]$[ endcapture 
                           capture ending ]$[ endcapture 
                           switch attribute.type 
                               case date ]$[ capture beginning ]new Date($[ endcapture ]$[ capture ending ])$[ endcapture 
                               case byte ]$[ capture ending ].toByteArray()$[ endcapture ]$[ case uuid ]$[ let ending = ")" ]$[ let beginning = "UUID.fromString(" 
                               default ]$[ capture ending ]$[ endcapture 
                           endswitch ]
        ${indent}modelObject.set${attribute|domain:Model|name|capitalize}(${beginning}protobufObject.get${attribute|domain:ProtobufDTO|name|capitalize}()${ending});
                    $[ endif 
                   endif 
                   if nullable ]
        }
                $[ endif 
               endforeach 
               if true 
                   let showRelationshipComment = true 
                   foreach entity.relationships 
                       let toEntity = relationship.to.entity 
                       if toEntity == null ]$[ continue ]$[ endif 
                       if isReleasedEntity && toEntity.hasTag("release:top") ]$[ continue ]$[ endif 
                       if relationship.to.isOne 
                           let _toEntity = relationship.to.entity 
                           let includeChildEntities = _toEntity.space.name == entity.space.name && !_toEntity.isIncluded 
                           if !includeChildEntities ]$[ continue ]$[ endif 
                           if showRelationshipComment ]
        // relationships
                            $[ let showRelationshipComment = false 
                           endif 
                           switch relationship.to.entity.primaryKey.type 
                               case uuid ]$[ let ending = ")" ]$[ let beginning = "UUID.fromString(" 
                               default ]$[ let ending = "" ]$[ let beginning = "" 
                           endswitch 
                           let _toEntityPKModelNameInMethod = (relationship|domain:Model|name|capitalize) + "Id" 
                           if true || !relationship.isParent 
                               let _toEntityPKNameInMethod = _toEntity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize ]
        if (protobufObject.has${relationship|domain:ProtobufDTO|name|capitalize}()) {
            modelObject.set${_toEntityPKModelNameInMethod}(${beginning}protobufObject.get${relationship|domain:ProtobufDTO|name|capitalize}().get${_toEntityPKNameInMethod}()${ending});
        }
                        $[ else 
                               capture _toEntityPKNameInMethod ]${relationship|domain:ProtobufDTO|name|capitalize}Id$[ endcapture ]
        if (protobufObject.has${_toEntityPKNameInMethod}()) {
            modelObject.set${_toEntityPKModelNameInMethod}(${beginning}protobufObject.get${_toEntityPKNameInMethod}()${ending});
        }
                        $[ endif 
                       endif 
                   endforeach    /* relationship */ 
               endif ]

        return modelObject;
    }

            $[ /********************************************************************
    JSONDTO <== PROTOBUF
  ********************************************************************/ ]
    public ${dtoDomainEntity|name} toDtoFromProtobuf(${fullProtobufClassName} protobufObject) {
        ${dtoDomainEntity|name} dtoObject = new ${dtoDomainEntity|name}();

            $[ if entity.hasPrimaryKey ]
        // primary key
                $[ capture beginning ]$[ endcapture 
                   capture ending ]$[ endcapture 
                   switch entity.pkType 
                       case uuid ]$[ let ending = ")" ]$[ let beginning = "UUID.fromString(" 
                       default ]$[ let ending = "" ]$[ let beginning = "" 
                   endswitch ]
        if (protobufObject.has${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}()) {
            dtoObject.set${entity.primaryKeyAttribute|domain:JSONDTO|name|capitalize}(${beginning}protobufObject.get${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}()${ending});
        }
            $[ endif ]

            $[ let showAttributeComment = true 
               foreach attribute in entity.attributes if !attribute.isVirtual && !(attribute|domain:DTOMapper).hasTag("exclude") 
                   let attributeType = attribute.type 
                   if attribute.isSecondaryEntityType 
                       let attributeType = attribute.getTypeEntity() 
                   endif 
                   let indent = "" 
                   let nullable = attribute.type|language hasNullable 
                   if attribute.isArray ]$[ let nullable = false ]$[ endif 
                   let dtoAttributeNameInMethod = attribute|domain:JSONDTO|name|capitalize 
                   let protobufAttributeNameInMethod = attribute|domain:ProtobufDTO|name|capitalize 
                   if showAttributeComment 
                       let showAttributeComment = false ]
        // attributes
                $[ endif 
                   let indent = "" 
                   if nullable 
                       let indent = "    " ]
        if (protobufObject.has${protobufAttributeNameInMethod}()) {
                $[ endif 
                   if attribute.isArray 
                       if attribute.type.isEnumType ]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().map(s -> ${attribute.type|domain:JSONDTO|name}.valueOf(s.toString())).collect(Collectors.toSet()));
                    $[ elseif attribute.type.isEntityType ]
        {
            ${attribute.type|domain:DTOMapper|name} _mapper = new ${attribute.type|domain:DTOMapper|name}();
            dtoObject.set${dtoAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().map(s -> _mapper.toDtoFromProtobuf(s)).collect(Collectors.toSet()));
        }
                    $[ else ]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().collect(Collectors.toSet()));
                    $[ endif 
                   else    /* !attribute.isArray */ 
                       if attribute.type.isEntityType 
                           let localMapperClassName = attributeType|domain:DTOMapper|name 
   send mapperDecl ]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[ endsend ]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toDtoFromProtobuf(protobufObject.get${protobufAttributeNameInMethod}()));
                    $[ elseif attribute.type.isEnumType ]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(${attribute.type|domain:JSONDTO|name}.valueOf(protobufObject.get${protobufAttributeNameInMethod}().toString()));
                    $[ else    /* !attribute.type.isEnumType */ 
                           /* we need to consider the data type here */ 
                           capture beginning ]$[ endcapture 
                           capture ending ]$[ endcapture 
                           switch attribute.type 
                               case date ]$[ capture beginning ]new Date($[ endcapture ]$[ capture ending ])$[ endcapture 
                               case byte ]$[ capture ending ].toByteArray()$[ endcapture ]$[ case uuid ]$[ let ending = ")" ]$[ let beginning = "UUID.fromString(" 
                               default ]$[ capture ending ]$[ endcapture 
                           endswitch ]
        ${indent}dtoObject.set${attribute|domain:JSONDTO|name|capitalize}(${beginning}protobufObject.get${attribute|domain:ProtobufDTO|name|capitalize}()${ending});
                    $[ endif 
                   endif 
                   if nullable ]
        }
                $[ endif 
               endforeach 
               if true 
                   let showRelationshipComment = true 
                   foreach entity.relationships 
                       if !relationship.isParent && relationship.to.isOne 
                           let _toEntity = relationship.to.entity 
                           let includeChildEntities = _toEntity.space.name == entity.space.name && !_toEntity.isIncluded 
                           if !includeChildEntities ]$[ continue ]$[ endif 
                           if showRelationshipComment ]
        // relationships
                            $[ let showRelationshipComment = false 
                           endif 
                           let _toEntityMapperClassName = _toEntity|domain:DTOMapper|name 
                           let _toEntityMapperVariableName = _toEntityMapperClassName|uncapitalize 
   send mapperDecl ]
    @Autowired ${_toEntityMapperClassName} ${_toEntityMapperVariableName};
$[ endsend ]
        if (protobufObject.has${relationship|domain:ProtobufDTO|name|capitalize}()) {
            dtoObject.set${relationship|domain:JSONDTO|name|capitalize}(${_toEntityMapperVariableName}.toDtoFromProtobuf(protobufObject.get${relationship|domain:ProtobufDTO|name|capitalize}()));
        }
                    $[ endif 
                   endforeach    /* relationship */ 
               endif ]

        return dtoObject;
    }

        $[ endif 
       endauthor 
   endauthor ]