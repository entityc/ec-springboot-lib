$[language java]
$[domain DTOMapper]
$[*
    Generate README.md file for all Services.
*]
$[file domain.namespace|path "README" "md"]
# Mapper Classes

The classes in this directory are Mapper classes as part of the Spring Framework.

## Generated by

Entity Compiler v${compiler.version}

Template: `${__template.name}` v${__template.version}

$[/file]
$[function makeMapper
  (space,
   domain,
   module,
   entity
  )]
    $[let dtoDomainEntity = entity|domain:JSONDTO]
    $[let modelDomainEntity = entity|domain:Model]
    $[let protobufNamespace = (space.domain("ProtobufDTO")).namespace]
    $[let modelNamespace = (space.domain("Model")).namespace]
    $[let mapperClassName = entity|domain:DTOMapper|name];
    $[file domain.namespace|path mapperClassName "java"]
//
// This Mapper class is responsible for mapping between various representations of the following entity:
//
//   Name:        ${entity.name}
        $[if entity.hasDescription]
//   Description: ${entity.description|wrap}
        $[/if]
        $[if entity.hasTags]
//   Tags:        [${entity.tagsSeparatedBy("][")}]
        $[/if]
//
// THIS FILE IS GENERATED. DO NOT EDIT!!
//
package ${domain.namespace};

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.UUID;
import java.util.stream.Collectors;
import org.springframework.stereotype.Component;
import com.google.protobuf.ByteString;
import org.springframework.beans.factory.annotation.Autowired;
import org.modelmapper.ModelMapper;
$[receive distinct imports]
        $[foreach entity.attributes]
            $[if attribute.type.isEnumType]
import ${attribute.type|domain:Model|fullname};
            $[/if]
        $[/foreach]
import ${protobufNamespace}.${module.name|capitalize};
        $[foreach refMod in module.referencedModules|sort]
import ${protobufNamespace}.${refMod.name|capitalize};
        $[/foreach]
import ${dtoDomainEntity|fullname};
import ${modelDomainEntity|fullname};
        $[foreach attribute in entity.attributes|sort]
            $[let attributeType = attribute.type]
            $[if attribute.isSecondaryEntityType]
                $[let attributeType = attribute.getTypeEntity()]
$[send imports]
import ${attributeType|domain:Model|fullname};
import ${attributeType|domain:JSONDTO|fullname};
$[/send]
            $[/if]
        $[/foreach]

        $[capture fullProtobufClassName]${module.name|capitalize}.${entity|domain:ProtobufDTO|name}$[/capture]
@Component
public class ${mapperClassName}
{
    @Autowired ModelMapper mapper;
$[receive distinct mapperDecl]

$[********************************************************************
    PROTOBUF <== MODEL
  ********************************************************************]
    public ${fullProtobufClassName} toProtobufFromModel(${modelDomainEntity.name} modelObject) {
        ${fullProtobufClassName}.Builder builder = ${fullProtobufClassName}.newBuilder();

        $[if entity.hasPrimaryKey]
            $[switch entity.primaryKey.type]
                $[case uuid]$[let ending = ".toString()"]
                $[default]$[let ending = ""]
            $[/switch]
        // primary key
        builder.set${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}(modelObject.get${entity.primaryKeyAttribute|domain:Model|name|capitalize}()${ending});

        $[/if]
        $[let showAttributeComment = true]
        $[foreach entity.attributes|sort]
            $[let nullable = attribute.type|language hasNullable]
            $[let attributeType = attribute.type]
            $[if attribute.isSecondaryEntityType]
                $[let attributeType = attribute.getTypeEntity()]
                $[let nullable = true]
            $[/if]
            $[if showAttributeComment]
                $[let showAttributeComment = false]
        // attributes
            $[/if]
            $[let indent = ""]
            $[let modelAttributeNameInMethod = attribute|domain:Model|name|capitalize]
            $[let protobufAttributeNameInMethod = attribute|domain:ProtobufDTO|name|capitalize]
            $[if nullable]
                $[let indent = "    "]
        if (modelObject.get${modelAttributeNameInMethod}() != null) {
            $[/if]
            $[if attribute.type.isAssetType]
        ${indent}builder.set${protobufAttributeNameInMethod}(modelObject.${getname}${modelAttributeNameInMethod}Url());
            $[elseif attribute.isArray]
                $[if attribute.type.isEnumType]
                    $[let methodName = "toString"]
                    $[foreach item in attribute.type.items]
                        $[if (item|domain|name) != (item|domain:ProtobufDTO|name)]
                            $[let methodName = "getProtobufValue"]
                            $[break]
                        $[/if]
                    $[/foreach]
                    $[capture entityScope]$[if attribute.type.hasParentEntity]${attribute.type.parentEntity|domain:ProtobufDTO|name}.$[/if]$[/capture]
        ${indent}builder.addAll${protobufAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}().stream().map(s -> ${attribute.type.module|domain:ProtobufDTO|name}.${entityScope}${attribute.type|domain:ProtobufDTO|name}.valueOf(s.${methodName}())).collect(Collectors.toSet()));
                $[elseif attribute.type.isEntityType]
                    $[let localMapperClassName = attributeType|domain:DTOMapper|name]
        ${indent}${localMapperClassName} localMapper = new ${localMapperClassName}();
        ${indent}for (${attributeType|domain:Model|name} obj :  modelObject.get${modelAttributeNameInMethod}()) {
        ${indent}    builder.add${modelAttributeNameInMethod}(localMapper.toProtobufFromModel(obj));
        ${indent}}
                $[else]
        ${indent}builder.addAll${protobufAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}());
                $[/if]
            $[else]$[* !attribute.isArray *]
                $[if attribute.type.isEntityType]
$[send mapperDecl]
                        $[let localMapperClassName = attributeType|domain:DTOMapper|name]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[/send]
        ${indent}builder.set${protobufAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toProtobufFromModel(modelObject.get${modelAttributeNameInMethod}()));
                $[elseif attribute.type.isEnumType]
                    $[capture entityScope]$[if attribute.type.hasParentEntity]${attribute.type.parentEntity|domain:ProtobufDTO|name}.$[/if]$[/capture]
                    $[let methodName = "toString"]
                    $[foreach item in attribute.type.items]
                        $[if (item|domain|name) != (item|domain:ProtobufDTO|name)]
                            $[let methodName = "getProtobufValue"]
                            $[break]
                        $[/if]
                    $[/foreach]
        ${indent}builder.set${protobufAttributeNameInMethod}(${attribute.type.module|domain:ProtobufDTO|name}.${entityScope}${attribute.type|domain:ProtobufDTO|name}.valueOf(modelObject.get${modelAttributeNameInMethod}().${methodName}()));
                $[else]$[* !attribute.type.isEnumType *]
$[* we need to consider the data type here *]
                    $[capture ending]$[/capture]
                    $[capture beginning]$[/capture]
                    $[capture getname]get$[/capture]
                    $[switch attribute.type]
                        $[case date]$[capture ending].getTime()$[/capture]
                        $[case boolean]$[capture ending]$[/capture]$[capture getname]is$[/capture]$[case byte]$[capture beginning]ByteString.copyFrom($[/capture]$[capture ending])$[/capture]$[case uuid]$[capture ending].toString()$[/capture]
                        $[default]$[capture ending]$[/capture]
                    $[/switch]
        ${indent}builder.set${attribute|domain:ProtobufDTO|name|capitalize}(${beginning}modelObject.${getname}${attribute|domain:Model|name|capitalize}()${ending});
                $[/if]
            $[/if]
            $[if nullable]
        }
            $[/if]
        $[/foreach]$[* attribute *]
$[** RELATIONSHIPS **]
        $[let showRelationshipComment = true]
        $[foreach entity.relationships]
            $[if relationship.to.isOne]
                $[let _toEntity = relationship.to.entity]
                $[let isSelf = _toEntity.name == entity.name]
                $[let includeChildEntities = _toEntity.space.name == entity.space.name && ! _toEntity.isIncluded]
                $[if ! includeChildEntities]$[continue]$[/if]
                $[if showRelationshipComment]
        // relationships
                    $[let showRelationshipComment = false]
                $[/if]
                $[let _toEntityMapperClassName = _toEntity|domain:DTOMapper|name]
                $[let _toEntityMapperVariableName = _toEntityMapperClassName|uncapitalize]
                $[if isSelf]
                    $[let _toEntityMapperVariableName = "this"]
                $[else]
$[send mapperDecl]
    @Autowired ${_toEntityMapperClassName} ${_toEntityMapperVariableName};
$[/send]
$[send imports]
import ${_toEntity|domain:Model|fullname};
$[/send]
                $[/if]
        if (modelObject.get${relationship|domain:Model|name|capitalize}Id() != null) {
            ${_toEntity|domain:Model|name} refObject = new ${_toEntity|domain:Model|name}();
            refObject.set${_toEntity.primaryKeyAttribute|domain:Model|name|capitalize}(modelObject.get${relationship|domain:Model|name|capitalize}Id());
            builder.set${relationship|domain:ProtobufDTO|name|capitalize}(${_toEntityMapperVariableName}.toProtobufFromModel(refObject));
        }
            $[/if]
        $[/foreach]
        return (${fullProtobufClassName})builder.build();
    }

$[********************************************************************
    PROTOBUF <== JSONDTO
  ********************************************************************]
    public ${fullProtobufClassName} toProtobufFromDto(${dtoDomainEntity.name} dtoObject) {
        ${fullProtobufClassName}.Builder builder = ${fullProtobufClassName}.newBuilder();

        $[if entity.hasPrimaryKey]
            $[switch entity.primaryKey.type]
                $[case uuid]$[let ending = ".toString()"]
                $[default]$[let ending = ""]
            $[/switch]
        // primary key
        builder.set${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}(dtoObject.get${entity.primaryKeyAttribute|domain:JSONDTO|name|capitalize}()${ending});

        $[/if]
        $[let showAttributeComment = true]
        $[foreach entity.attributes]
            $[let nullable = attribute.type|language hasNullable]
            $[let attributeType = attribute.type]
            $[if attribute.isSecondaryEntityType]
                $[let attributeType = attribute.getTypeEntity()]
                $[let nullable = true]
            $[/if]
            $[if showAttributeComment]
                $[let showAttributeComment = false]
        // attributes
            $[/if]
            $[let indent = ""]
            $[let dtoAttributeNameInMethod = attribute|domain:JSONDTO|name|capitalize]
            $[let protobufAttributeNameInMethod = attribute|domain:ProtobufDTO|name|capitalize]
            $[if nullable]
                $[let indent = "    "]
        if (dtoObject.get${dtoAttributeNameInMethod}() != null) {
            $[/if]
            $[if attribute.type.isAssetType]
        ${indent}builder.set${protobufAttributeNameInMethod}(dtoObject.${getname}${dtoAttributeNameInMethod}Url());
            $[elseif attribute.isArray]
                $[if attribute.type.isEnumType]
                    $[capture entityScope]$[if attribute.type.hasParentEntity]${attribute.type.parentEntity|domain:ProtobufDTO|name}.$[/if]$[/capture]
        ${indent}builder.addAll${protobufAttributeNameInMethod}(dtoObject.get${dtoAttributeNameInMethod}().stream().map(s -> ${attribute.type.module|domain:ProtobufDTO|name}.${entityScope}${attribute.type|domain:ProtobufDTO|name}.valueOf(s.toString())).collect(Collectors.toSet()));
                $[elseif attribute.type.isEntityType]
$[send mapperDecl]
                        $[let localMapperClassName = attributeType|domain:DTOMapper|name]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[/send]
        ${indent}for (${attributeType|domain:JSONDTO|name} obj :  dtoObject.get${dtoAttributeNameInMethod}()) {
        ${indent}    builder.add${dtoAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toProtobufFromDto(obj));
        ${indent}}
                $[else]
        ${indent}builder.addAll${protobufAttributeNameInMethod}(dtoObject.get${dtoAttributeNameInMethod}());
                $[/if]
            $[else]$[* !attribute.isArray *]
                $[if attribute.type.isEntityType]
$[send mapperDecl]
                        $[let localMapperClassName = attributeType|domain:DTOMapper|name]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[/send]
        ${indent}builder.set${protobufAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toProtobufFromDto(dtoObject.get${dtoAttributeNameInMethod}()));
                $[elseif attribute.type.isEnumType]
                    $[capture entityScope]$[if attribute.type.hasParentEntity]${attribute.type.parentEntity|domain:ProtobufDTO|name}.$[/if]$[/capture]
        ${indent}builder.set${protobufAttributeNameInMethod}(${attribute.type.module|domain:ProtobufDTO|name}.${entityScope}${attribute.type|domain:ProtobufDTO|name}.valueOf(dtoObject.get${dtoAttributeNameInMethod}().toString()));
                $[else]$[* !attribute.type.isEnumType *]
$[* we need to consider the data type here *]
                    $[capture ending]$[/capture]
                    $[capture beginning]$[/capture]
                    $[capture getname]get$[/capture]
                    $[switch attribute.type]
                        $[case date]$[capture ending].getTime()$[/capture]
                        $[case boolean]$[capture ending]$[/capture]$[capture getname]is$[/capture]$[case byte]$[capture beginning]ByteString.copyFrom($[/capture]$[capture ending])$[/capture]$[case uuid]$[capture ending].toString()$[/capture]
                        $[default]$[capture ending]$[/capture]
                    $[/switch]
        ${indent}builder.set${attribute|domain:ProtobufDTO|name|capitalize}(${beginning}dtoObject.${getname}${attribute|domain:JSONDTO|name|capitalize}()${ending});
                $[/if]
            $[/if]
            $[if nullable]
        }
            $[/if]
        $[/foreach]$[* attribute *]
$[** RELATIONSHIPS **]
        $[let showRelationshipComment = true]
        $[foreach entity.relationships]
            $[if relationship.to.isOne]
                $[let _toEntity = relationship.to.entity]
                $[let includeChildEntities = _toEntity.space.name == entity.space.name && ! _toEntity.isIncluded]
                $[if ! includeChildEntities]$[continue]$[/if]
                $[if showRelationshipComment]
        // relationships
                    $[let showRelationshipComment = false]
                $[/if]
                $[let _toEntityMapperClassName = _toEntity|domain:DTOMapper|name]
                $[let _toEntityMapperVariableName = _toEntityMapperClassName|uncapitalize]
$[send mapperDecl]
    @Autowired ${_toEntityMapperClassName} ${_toEntityMapperVariableName};
$[/send]
        if (dtoObject.get${relationship|domain:JSONDTO|name|capitalize}() != null) {
            builder.set${relationship|domain:ProtobufDTO|name|capitalize}(${_toEntityMapperVariableName}.toProtobufFromDto(dtoObject.get${relationship|domain:JSONDTO|name|capitalize}()));
        }

            $[/if]
        $[/foreach]$[* relationship *]
        return (${fullProtobufClassName})builder.build();
    }

$[********************************************************************
    MODEL <== PROTOBUF
  ********************************************************************]
    public ${modelDomainEntity|name} toModelFromProtobuf(${fullProtobufClassName} protobufObject) {
        ${modelDomainEntity|name} modelObject = new ${modelDomainEntity|name}();

        $[if entity.hasPrimaryKey]
        // primary key
            $[capture beginning]$[/capture]
            $[capture ending]$[/capture]
            $[switch entity.pkType]
                $[case uuid]$[let ending = ")"]$[let beginning = "UUID.fromString("]
                $[default]
            $[/switch]
        if (protobufObject.has${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}()) {
            modelObject.set${entity.primaryKeyAttribute|domain:Model|name|capitalize}(${beginning}protobufObject.get${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}()${ending});
        }
        $[/if]

        $[let showAttributeComment = true]
        $[foreach attribute in entity.attributes]
            $[let attributeType = attribute.type]
            $[if attribute.isSecondaryEntityType]
                $[let attributeType = attribute.getTypeEntity()]
            $[/if]
            $[let indent = ""]
            $[let nullable = attribute.type|language hasNullable]
            $[if attribute.isArray]$[let nullable = false]$[/if]
            $[let modelAttributeNameInMethod = attribute|domain:Model|name|capitalize]
            $[let protobufAttributeNameInMethod = attribute|domain:ProtobufDTO|name|capitalize]
            $[if showAttributeComment]
                $[let showAttributeComment = false]
        // attributes
            $[/if]
            $[let indent = ""]
            $[if nullable]
                $[let indent = "    "]
        if (protobufObject.has${protobufAttributeNameInMethod}()) {
            $[/if]
            $[if attribute.isArray]
                $[if attribute.type.isEnumType]
                    $[let valueOfMethodName = "valueOf"]
                    $[foreach item in attribute.type.items]
                        $[if (item|domain|name) != (item|domain:ProtobufDTO|name)]
                            $[let valueOfMethodName = "protobufValueOf"]
                            $[break]
                        $[/if]
                    $[/foreach]
        ${indent}modelObject.set${modelAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().map(s -> ${attribute.type|domain:Model|name}.${valueOfMethodName}(s.toString())).collect(Collectors.toSet()));
                $[elseif attribute.type.isEntityType]
        {
            ${attribute.type|domain:DTOMapper|name} _mapper = new ${attribute.type|domain:DTOMapper|name}();
            modelObject.set${modelAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().map(s -> _mapper.toModelFromProtobuf(s)).collect(Collectors.toSet()));
        }
                $[else]
        ${indent}modelObject.set${modelAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().collect(Collectors.toSet()));
                $[/if]
            $[else]$[* !attribute.isArray *]
                $[if attribute.type.isEntityType]
                    $[let localMapperClassName = attributeType|domain:DTOMapper|name]
$[send mapperDecl]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[/send]
        ${indent}modelObject.set${modelAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toModelFromProtobuf(protobufObject.get${protobufAttributeNameInMethod}()));
                $[elseif attribute.type.isEnumType]
                    $[let valueOfMethodName = "valueOf"]
                    $[foreach item in attribute.type.items]
                        $[if (item|domain|name) != (item|domain:ProtobufDTO|name)]
                            $[let valueOfMethodName = "protobufValueOf"]
                            $[break]
                        $[/if]
                    $[/foreach]
        ${indent}modelObject.set${modelAttributeNameInMethod}(${attribute.type|domain:Model|name}.${valueOfMethodName}(protobufObject.get${protobufAttributeNameInMethod}().toString()));
                $[else]$[* !attribute.type.isEnumType *]
$[* we need to consider the data type here *]
                    $[capture beginning]$[/capture]
                    $[capture ending]$[/capture]
                    $[switch attribute.type]
                        $[case date]$[capture beginning]new Date($[/capture]$[capture ending])$[/capture]
                        $[case byte]$[capture ending].toByteArray()$[/capture]$[case uuid]$[let ending = ")"]$[let beginning = "UUID.fromString("]
                        $[default]$[capture ending]$[/capture]
                    $[/switch]
        ${indent}modelObject.set${attribute|domain:Model|name|capitalize}(${beginning}protobufObject.get${attribute|domain:ProtobufDTO|name|capitalize}()${ending});
                $[/if]
            $[/if]
            $[if nullable]
        }
            $[/if]
        $[/foreach]
        $[if true]
            $[let showRelationshipComment = true]
            $[foreach entity.relationships]
                $[if relationship.to.isOne]
                    $[let _toEntity = relationship.to.entity]
                    $[let includeChildEntities = _toEntity.space.name == entity.space.name && ! _toEntity.isIncluded]
                    $[if ! includeChildEntities]$[continue]$[/if]
                    $[if showRelationshipComment]
        // relationships
                        $[let showRelationshipComment = false]
                    $[/if]
                    $[switch relationship.to.entity.primaryKey.type]
                        $[case uuid]$[let ending = ")"]$[let beginning = "UUID.fromString("]
                        $[default]$[let ending = ""]$[let beginning = ""]
                    $[/switch]
                    $[let _toEntityPKModelNameInMethod = (relationship|domain:Model|name|capitalize) + "Id"]
                    $[if true || ! relationship.isParent]
                        $[let _toEntityPKNameInMethod = _toEntity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize]
        if (protobufObject.has${relationship|domain:ProtobufDTO|name|capitalize}()) {
            modelObject.set${_toEntityPKModelNameInMethod}(${beginning}protobufObject.get${relationship|domain:ProtobufDTO|name|capitalize}().get${_toEntityPKNameInMethod}()${ending});
        }
                    $[else]
                        $[capture _toEntityPKNameInMethod]${relationship|domain:ProtobufDTO|name|capitalize}Id$[/capture]
        if (protobufObject.has${_toEntityPKNameInMethod}()) {
            modelObject.set${_toEntityPKModelNameInMethod}(${beginning}protobufObject.get${_toEntityPKNameInMethod}()${ending});
        }
                    $[/if]
                $[/if]
            $[/foreach]$[* relationship *]
        $[/if]

        return modelObject;
    }

$[********************************************************************
    JSONDTO <== PROTOBUF
  ********************************************************************]
    public ${dtoDomainEntity|name} toDtoFromProtobuf(${fullProtobufClassName} protobufObject) {
        ${dtoDomainEntity|name} dtoObject = new ${dtoDomainEntity|name}();

        $[if entity.hasPrimaryKey]
        // primary key
            $[capture beginning]$[/capture]
            $[capture ending]$[/capture]
            $[switch entity.pkType]
                $[case uuid]$[let ending = ")"]$[let beginning = "UUID.fromString("]
                $[default]$[let ending = ""]$[let beginning = ""]
            $[/switch]
        if (protobufObject.has${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}()) {
            dtoObject.set${entity.primaryKeyAttribute|domain:JSONDTO|name|capitalize}(${beginning}protobufObject.get${entity.primaryKeyAttribute|domain:ProtobufDTO|name|capitalize}()${ending});
        }
        $[/if]

        $[let showAttributeComment = true]
        $[foreach attribute in entity.attributes]
            $[let attributeType = attribute.type]
            $[if attribute.isSecondaryEntityType]
                $[let attributeType = attribute.getTypeEntity()]
            $[/if]
            $[let indent = ""]
            $[let nullable = attribute.type|language hasNullable]
            $[if attribute.isArray]$[let nullable = false]$[/if]
            $[let dtoAttributeNameInMethod = attribute|domain:JSONDTO|name|capitalize]
            $[let protobufAttributeNameInMethod = attribute|domain:ProtobufDTO|name|capitalize]
            $[if showAttributeComment]
                $[let showAttributeComment = false]
        // attributes
            $[/if]
            $[let indent = ""]
            $[if nullable]
                $[let indent = "    "]
        if (protobufObject.has${protobufAttributeNameInMethod}()) {
            $[/if]
            $[if attribute.isArray]
                $[if attribute.type.isEnumType]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().map(s -> ${attribute.type|domain:JSONDTO|name}.valueOf(s.toString())).collect(Collectors.toSet()));
                $[elseif attribute.type.isEntityType]
        {
            ${attribute.type|domain:DTOMapper|name} _mapper = new ${attribute.type|domain:DTOMapper|name}();
            dtoObject.set${dtoAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().map(s -> _mapper.toDtoFromProtobuf(s)).collect(Collectors.toSet()));
        }
                $[else]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(protobufObject.get${protobufAttributeNameInMethod}List().stream().collect(Collectors.toSet()));
                $[/if]
            $[else]$[* !attribute.isArray *]
                $[if attribute.type.isEntityType]
                    $[let localMapperClassName = attributeType|domain:DTOMapper|name]
$[send mapperDecl]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[/send]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toDtoFromProtobuf(protobufObject.get${protobufAttributeNameInMethod}()));
                $[elseif attribute.type.isEnumType]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(${attribute.type|domain:JSONDTO|name}.valueOf(protobufObject.get${protobufAttributeNameInMethod}().toString()));
                $[else]$[* !attribute.type.isEnumType *]
$[* we need to consider the data type here *]
                    $[capture beginning]$[/capture]
                    $[capture ending]$[/capture]
                    $[switch attribute.type]
                        $[case date]$[capture beginning]new Date($[/capture]$[capture ending])$[/capture]
                        $[case byte]$[capture ending].toByteArray()$[/capture]$[case uuid]$[let ending = ")"]$[let beginning = "UUID.fromString("]
                        $[default]$[capture ending]$[/capture]
                    $[/switch]
        ${indent}dtoObject.set${attribute|domain:JSONDTO|name|capitalize}(${beginning}protobufObject.get${attribute|domain:ProtobufDTO|name|capitalize}()${ending});
                $[/if]
            $[/if]
            $[if nullable]
        }
            $[/if]
        $[/foreach]
        $[if true]
            $[let showRelationshipComment = true]
            $[foreach entity.relationships]
                $[if ! relationship.isParent && relationship.to.isOne]
                    $[let _toEntity = relationship.to.entity]
                    $[let includeChildEntities = _toEntity.space.name == entity.space.name && ! _toEntity.isIncluded]
                    $[if ! includeChildEntities]$[continue]$[/if]
                    $[if showRelationshipComment]
        // relationships
                        $[let showRelationshipComment = false]
                    $[/if]
                    $[let _toEntityMapperClassName = _toEntity|domain:DTOMapper|name]
                    $[let _toEntityMapperVariableName = _toEntityMapperClassName|uncapitalize]
$[send mapperDecl]
    @Autowired ${_toEntityMapperClassName} ${_toEntityMapperVariableName};
$[/send]
        if (protobufObject.has${relationship|domain:ProtobufDTO|name|capitalize}()) {
            dtoObject.set${relationship|domain:JSONDTO|name|capitalize}(${_toEntityMapperVariableName}.toDtoFromProtobuf(protobufObject.get${relationship|domain:ProtobufDTO|name|capitalize}()));
        }
                $[/if]
            $[/foreach]$[* relationship *]
        $[/if]

        return dtoObject;
    }

$[********************************************************************
    JSONDTO <== MODEL
  ********************************************************************]
    public ${dtoDomainEntity|name} toDtoFromModel(${modelDomainEntity|name} modelObject) {
        ${dtoDomainEntity|name} dtoObject = new ${dtoDomainEntity|name}();
        $[if entity.hasPrimaryKey]
        // primary key
        dtoObject.set${entity.primaryKeyAttribute|domain:JSONDTO|name|capitalize}(modelObject.get${entity.primaryKeyAttribute|domain:Model|name|capitalize}());

        $[/if]
        $[let showAttributeComment = true]
        $[foreach entity.attributes]
            $[let nullable = attribute.type|language hasNullable]
            $[let attributeType = attribute.type]
            $[if attribute.isSecondaryEntityType]
                $[let attributeType = attribute.getTypeEntity()]
                $[let nullable = true]
            $[/if]
            $[if showAttributeComment]
                $[let showAttributeComment = false]
        // attributes
            $[/if]
            $[let indent = ""]
            $[let modelAttributeNameInMethod = attribute|domain:Model|name|capitalize]
            $[let dtoAttributeNameInMethod = attribute|domain:JSONDTO|name|capitalize]
            $[if nullable]
                $[let indent = "    "]
        if (modelObject.get${modelAttributeNameInMethod}() != null) {
            $[/if]
            $[if attribute.isArray]
                $[if attribute.type.isEnumType]
                    $[capture entityScope]$[if attribute.type.hasParentEntity]${attribute.type.parentEntity|domain:JSONDTO|name}.$[/if]$[/capture]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}().stream().map(s -> ${entityScope}${attribute.type|domain:JSONDTO|name}.valueOf(s.toString())).collect(Collectors.toSet()));
                $[elseif attribute.type.isEntityType]
$[send imports]
import java.util.HashSet;
$[/send]
                    $[let localMapperClassName = attributeType|domain:DTOMapper|name]
        ${indent}${localMapperClassName} localMapper = new ${localMapperClassName}();
        ${indent}HashSet<${attributeType|domain:JSONDTO|name}> dtoObjects = new HashSet<>();
        ${indent}for (${attributeType|domain:Model|name} obj :  modelObject.get${modelAttributeNameInMethod}()) {
        ${indent}    dtoObjects.add(localMapper.toDtoFromModel(obj));
        ${indent}}
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(dtoObjects);
                $[else]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}());
                $[/if]
            $[else]$[* !attribute.isArray *]
                $[if attribute.type.isEntityType]
$[send mapperDecl]
                        $[let localMapperClassName = attributeType|domain:DTOMapper|name]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[/send]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toDtoFromModel(modelObject.get${modelAttributeNameInMethod}()));
                $[elseif attribute.type.isEnumType]
                    $[capture entityScope]$[if attribute.type.hasParentEntity]${attribute.type.parentEntity|domain:JSONDTO|name}.$[/if]$[/capture]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}());
                $[else]$[* !attribute.type.isEnumType *]
$[* we need to consider the data type here *]
                    $[capture ending]$[/capture]
                    $[capture beginning]$[/capture]
                    $[capture getname]get$[/capture]
                    $[switch attribute.type]
                        $[case boolean]$[capture ending]$[/capture]$[capture getname]is$[/capture]
                        $[default]$[capture ending]$[/capture]
                    $[/switch]
        ${indent}dtoObject.set${attribute|domain:JSONDTO|name|capitalize}(${beginning}modelObject.${getname}${attribute|domain:Model|name|capitalize}()${ending});
                $[/if]
            $[/if]
            $[if nullable]
        }
            $[/if]
        $[/foreach]$[* attribute *]
$[** RELATIONSHIPS **]
        $[let showRelationshipComment = true]
        $[foreach relationship in (entity|domain:JSONDTO|view:APIGet).relationships]
            $[if relationship.to.isOne && relationship.withViewName == "Reference"]
                $[let _toEntity = relationship.to.entity]
                $[let includeChildEntities = _toEntity.entity.space.name == entity.space.name && ! _toEntity.entity.isIncluded]
                $[if ! includeChildEntities]$[continue]$[/if]
                $[if showRelationshipComment]
        // relationships
                    $[let showRelationshipComment = false]
                $[/if]
                $[let _toEntityMapperClassName = _toEntity|domain:DTOMapper|name]
                $[let _toEntityMapperVariableName = _toEntityMapperClassName|uncapitalize]
$[send imports]
import ${_toEntity|domain:Model|fullname};
$[/send]
        if (modelObject.get${relationship|domain:Model|name|capitalize}Id() != null) {
            ${_toEntity|domain:Model|name} refObject = new ${_toEntity|domain:Model|name}();
            refObject.set${_toEntity.primaryKeyAttribute|domain:Model|name|capitalize}(modelObject.get${relationship|domain:Model|name|capitalize}Id());
            dtoObject.set${relationship|name|capitalize}(${_toEntityMapperVariableName}.toDtoFromModel(refObject));
        }
            $[/if]
        $[/foreach]
        return dtoObject;
    }

$[********************************************************************
    MODEL <== JSONDTO
  ********************************************************************]
    public ${modelDomainEntity|name} toModelFromDto(${dtoDomainEntity|name} dtoObject) {
        // for now do this, but since names can be quite different potentially we should
        // really do attribute by attribute code like the others.
        return mapper.map(dtoObject, ${modelDomainEntity|name}.class);
    }
}

    $[/file]
$[/function]

$[foreach space.modules]
    $[if module.isIncluded]$[continue]$[/if]
    $[foreach module.entities]
        $[if entity.isImplicit || entity.isExtern || entity.isIncluded || entity.isTransient]$[continue]$[/if]
        $[call makeMapper(domain:domain,module:module,entity:entity,space:space)]
    $[/foreach]$[* entity *]
$[/foreach]$[* module *]
