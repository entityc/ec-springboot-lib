$[ language java ]
$[ domain DTOMapper 
   D summary, main "Generates code associated with mapping data from a JSON DTO to a Model and vice versa." 
   /*
    Generate README.md file for all Services.
*/ 
   let destDir = domain.namespace|path 
   install "mapper/ModelMapperConfig.java" destDir 
   import "doc/SourceHeaders" 
   import "mapper/MapperProtoTemplate" 
   publisher org.entityc.springboot.mapper 
       file destDir "README" "md" ]
# Mapper Classes

The classes in this directory are Mapper classes used to map between different object representations of entities.

These mapper classes support the following mappings:

* JSON to Model
* Model to JSON
$[ outlet readmeMappingBullets 
   endoutlet 
       endfile ]

    $[ foreach space.modules 
           if module.isIncluded ]$[ continue ]$[ endif 
           foreach module.entities 
               if entity.isImplicit || entity.isExtern || entity.isIncluded || entity.isTransient ]$[ continue ]$[ endif 
               let dtoDomainEntity = entity|domain:JSONDTO 
               let modelDomainEntity = entity|domain:Model 
               let modelNamespace = (space.domain("Model")).namespace 
               let mapperClassName = entity|domain:DTOMapper|name 
               file domain.namespace|path mapperClassName "java" 
                   call entityHeader(title: "This Mapper class is responsible for mapping between various representations of the following entity.") ]
package ${domain.namespace};

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.UUID;
import java.util.stream.Collectors;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.modelmapper.ModelMapper;
$[ receive distinct imports 
                   foreach entity.attributes 
                       if attribute.type.isEnumType ]
import ${attribute.type|domain:Model|fullname};
                    $[ endif 
                   endforeach ]
import ${dtoDomainEntity|fullname};
import ${modelDomainEntity|fullname};
                $[ foreach attribute in entity.attributes|sort 
                       let attributeType = attribute.type 
                       if attribute.isSecondaryEntityType 
                           let attributeType = attribute.getTypeEntity() 
   send imports ]
import ${attributeType|domain:Model|fullname};
import ${attributeType|domain:JSONDTO|fullname};
$[ endsend 
                       endif 
                   endforeach ]

@Component
public class ${mapperClassName}
{
    @Autowired ModelMapper mapper;
$[ receive distinct mapperDecl ]

                $[ /********************************************************************
    JSONDTO <== MODEL
  ********************************************************************/ ]
    public ${dtoDomainEntity|name} toDtoFromModel(${modelDomainEntity|name} modelObject) {
        ${dtoDomainEntity|name} dtoObject = new ${dtoDomainEntity|name}();
                $[ if entity.hasPrimaryKey ]
        // primary key
        dtoObject.set${entity.primaryKeyAttribute|domain:JSONDTO|name|capitalize}(modelObject != null ? modelObject.get${entity.primaryKeyAttribute|domain:Model|name|capitalize}() : null);

                $[ endif 
                   let showAttributeComment = true 
                   foreach domainAttribute in (entity|domain:JSONDTO|view:APIGet).attributes|sort if !domainAttribute.attribute.isVirtual && !(domainAttribute.attribute|domain:DTOMapper).hasTag("exclude") 
                       let attribute = domainAttribute.attribute 
                       let nullable = attribute.type|language hasNullable 
                       let attributeType = attribute.type 
                       if attribute.isSecondaryEntityType 
                           let attributeType = attribute.getTypeEntity() 
                           let nullable = false 
                       endif 
                       if showAttributeComment 
                           let showAttributeComment = false ]
        // attributes
                    $[ endif 
                       let indent = "" 
                       let modelAttributeNameInMethod = attribute|domain:Model|name|capitalize 
                       let dtoAttributeNameInMethod = attribute|domain:JSONDTO|name|capitalize 
                       if nullable 
                           let indent = "    " ]
        if (modelObject != null && modelObject.get${modelAttributeNameInMethod}() != null) {
                    $[ endif 
                       if attribute.isArray 
                           if attribute.type.isEnumType 
                               capture entityScope ]$[ if attribute.type.hasParentEntity ]${attribute.type.parentEntity|domain:JSONDTO|name}.$[ endif ]$[ endcapture ]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}().stream().map(s -> ${entityScope}${attribute.type|domain:JSONDTO|name}.valueOf(s.toString())).collect(Collectors.toSet()));
                        $[ elseif attribute.type.isEntityType 
   send imports ]
import java.util.HashSet;
$[ endsend 
                               let localMapperClassName = attributeType|domain:DTOMapper|name ]
        ${indent}${localMapperClassName} localMapper = new ${localMapperClassName}();
        ${indent}HashSet<${attributeType|domain:JSONDTO|name}> dtoObjects = new HashSet<>();
        ${indent}for (${attributeType|domain:Model|name} obj :  modelObject.get${modelAttributeNameInMethod}()) {
        ${indent}    dtoObjects.add(localMapper.toDtoFromModel(obj));
        ${indent}}
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(dtoObjects);
                        $[ else ]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}());
                        $[ endif 
                       else    /* !attribute.isArray */ 
                           if attribute.type.isEntityType 
   send mapperDecl 
                                   let localMapperClassName = attributeType|domain:DTOMapper|name ]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[ endsend ]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toDtoFromModel(modelObject != null ? modelObject.get${modelAttributeNameInMethod}() : null));
                        $[ elseif attribute.type.isEnumType 
                               capture entityScope ]$[ if attribute.type.hasParentEntity ]${attribute.type.parentEntity|domain:JSONDTO|name}.$[ endif ]$[ endcapture ]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(modelObject != null ? modelObject.get${modelAttributeNameInMethod}() : null);
                        $[ else    /* !attribute.type.isEnumType */ 
                               /* we need to consider the data type here */ 
                               capture ending ]$[ endcapture 
                               capture beginning ]$[ endcapture 
                               capture getname ]get$[ endcapture 
                               if !(attribute.type|language hasNullable) 
                                   switch attribute.type 
                                       case boolean ]$[ capture ending ]$[ endcapture ]$[ capture getname ]is$[ endcapture 
                                       default ]$[ capture ending ]$[ endcapture 
                                   endswitch 
                               endif ]
        ${indent}dtoObject.set${attribute|domain:JSONDTO|name|capitalize}(${beginning}(modelObject != null ? modelObject.${getname}${attribute|domain:Model|name|capitalize}() : null)${ending});
                        $[ endif 
                       endif 
                       if nullable ]
        }
                    $[ endif 
                   endforeach    /* attribute */ 
                   /** RELATIONSHIPS **/ 
                   foreach relationship in (entity|domain:JSONDTO|view:APIGet).relationships if relationship.to.isOne && relationship.withViewName == "Reference" 
                       if relationship#first ]
        // to-one relationships
        // --------------------
                    $[ endif 
                       let _toEntity = relationship.to.entity ]
        // ${_toEntity.entity.name}
                    $[ let includeChildEntities = _toEntity.entity.space.name == entity.space.name && !_toEntity.entity.isIncluded 
                       if !includeChildEntities ]$[ continue ]$[ endif 
                       let _toEntityMapperClassName = _toEntity|domain:DTOMapper|name 
                       let _toEntityMapperVariableName = _toEntityMapperClassName|uncapitalize 
   send mapperDecl ]
    @Autowired ${_toEntityMapperClassName} ${_toEntityMapperVariableName};
$[ endsend 
   send imports ]
import ${_toEntity|domain:Model|fullname};
$[ endsend ]
        if (modelObject != null && modelObject.get${relationship|domain:Model|name|capitalize}Id() != ${_toEntity.pkType.isUUIDType ? "null":"0"}) {
            ${_toEntity|domain:Model|name} refObject = new ${_toEntity|domain:Model|name}();
            refObject.set${_toEntity.primaryKeyAttribute|domain:Model|name|capitalize}(modelObject.get${relationship|domain:Model|name|capitalize}Id());
            dtoObject.set${relationship|name|capitalize}(${_toEntityMapperVariableName}.toDtoFromModel(refObject));
        }
                $[ endforeach ]
        return dtoObject;
    }

                $[ /********************************************************************
    MODEL <== JSONDTO
  ********************************************************************/ ]
    public ${modelDomainEntity|name} toModelFromDto(${dtoDomainEntity|name} dtoObject) {
        // for now do this, but since names can be quite different potentially we should
        // really do attribute by attribute code like the others.
        return mapper.map(dtoObject, ${modelDomainEntity|name}.class);
    }

$[ outlet methods
   D "This is where you can insert new mapping methods."

   endoutlet ]
}

            $[ endfile 
           endforeach    /* entity */ 
       endforeach    /* module */ 
   endpublisher ]