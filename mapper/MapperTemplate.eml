$[language java]
$[domain DTOMapper]
$[D summary, main "Generates code associated with mapping data from a JSON DTO to a Model and vice versa."]
$[*
    Generate README.md file for all Services.
*]
$[let destDir = (domain.namespace|path)]
$[install "mapper/ModelMapperConfig.java" destDir]
$[file domain.namespace|path "README" "md"]
# Mapper Classes

The classes in this directory are Mapper classes as part of the Spring Framework.

## Generated by

Entity Compiler v${compiler.version}

Template: `${__template.name}`

$[/file]
$[function makeMapper
  (space D "The application space.",
   domain D "The mapper domain",
   entity D "The entity to which to create mepping methods."
  )]
    $[let dtoDomainEntity = entity|domain:JSONDTO]
    $[let modelDomainEntity = entity|domain:Model]
    $[let modelNamespace = (space.domain("Model")).namespace]
    $[let mapperClassName = entity|domain:DTOMapper|name];
    $[file domain.namespace|path mapperClassName "java"]
//
// This Mapper class is responsible for mapping between various representations of the following entity:
//
//   Name:        ${entity.name}
        $[if entity.hasDescription]
//   Description: ${entity.description|wrap}
        $[/if]
        $[if entity.hasTags]
//   Tags:        [${entity.tagsSeparatedBy("][")}]
        $[/if]
//
// THIS FILE IS GENERATED. DO NOT EDIT!!
//
package ${domain.namespace};

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.UUID;
import java.util.stream.Collectors;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.modelmapper.ModelMapper;
$[receive distinct imports]
        $[foreach entity.attributes]
            $[if attribute.type.isEnumType]
import ${attribute.type|domain:Model|fullname};
            $[/if]
        $[/foreach]
import ${dtoDomainEntity|fullname};
import ${modelDomainEntity|fullname};
        $[foreach attribute in entity.attributes|sort]
            $[let attributeType = attribute.type]
            $[if attribute.isSecondaryEntityType]
                $[let attributeType = attribute.getTypeEntity()]
$[send imports]
import ${attributeType|domain:Model|fullname};
import ${attributeType|domain:JSONDTO|fullname};
$[/send]
            $[/if]
        $[/foreach]

@Component
public class ${mapperClassName}
{
    @Autowired ModelMapper mapper;
$[receive distinct mapperDecl]

$[********************************************************************
    JSONDTO <== MODEL
  ********************************************************************]
    public ${dtoDomainEntity|name} toDtoFromModel(${modelDomainEntity|name} modelObject) {
        ${dtoDomainEntity|name} dtoObject = new ${dtoDomainEntity|name}();
        $[if entity.hasPrimaryKey]
        // primary key
        dtoObject.set${entity.primaryKeyAttribute|domain:JSONDTO|name|capitalize}(modelObject != null ? modelObject.get${entity.primaryKeyAttribute|domain:Model|name|capitalize}() : null);

        $[/if]
        $[let showAttributeComment = true]
        $[foreach domainAttribute in (entity|domain:JSONDTO|view:APIGet).attributes|sort]
            $[let attribute = domainAttribute.attribute]
            $[if attribute.isVirtual || space.hasDomain("Security") && (attribute|domain:Security).hasTag("login:password")]$[continue]$[/if]
            $[let nullable = attribute.type|language hasNullable]
            $[let attributeType = attribute.type]
            $[if attribute.isSecondaryEntityType]
                $[let attributeType = attribute.getTypeEntity()]
                $[let nullable = false]
            $[/if]
            $[if showAttributeComment]
                $[let showAttributeComment = false]
        // attributes
            $[/if]
            $[let indent = ""]
            $[let modelAttributeNameInMethod = attribute|domain:Model|name|capitalize]
            $[let dtoAttributeNameInMethod = attribute|domain:JSONDTO|name|capitalize]
            $[if nullable]
                $[let indent = "    "]
        if (modelObject != null && modelObject.get${modelAttributeNameInMethod}() != null) {
            $[/if]
            $[if attribute.isArray]
                $[if attribute.type.isEnumType]
                    $[capture entityScope]$[if attribute.type.hasParentEntity]${attribute.type.parentEntity|domain:JSONDTO|name}.$[/if]$[/capture]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}().stream().map(s -> ${entityScope}${attribute.type|domain:JSONDTO|name}.valueOf(s.toString())).collect(Collectors.toSet()));
                $[elseif attribute.type.isEntityType]
$[send imports]
import java.util.HashSet;
$[/send]
                    $[let localMapperClassName = attributeType|domain:DTOMapper|name]
        ${indent}${localMapperClassName} localMapper = new ${localMapperClassName}();
        ${indent}HashSet<${attributeType|domain:JSONDTO|name}> dtoObjects = new HashSet<>();
        ${indent}for (${attributeType|domain:Model|name} obj :  modelObject.get${modelAttributeNameInMethod}()) {
        ${indent}    dtoObjects.add(localMapper.toDtoFromModel(obj));
        ${indent}}
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(dtoObjects);
                $[else]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(modelObject.get${modelAttributeNameInMethod}());
                $[/if]
            $[else]$[* !attribute.isArray *]
                $[if attribute.type.isEntityType]
$[send mapperDecl]
                        $[let localMapperClassName = attributeType|domain:DTOMapper|name]
    @Autowired ${localMapperClassName} ${localMapperClassName|uncapitalize};
$[/send]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(${localMapperClassName|uncapitalize}.toDtoFromModel(modelObject != null ? modelObject.get${modelAttributeNameInMethod}() : null));
                $[elseif attribute.type.isEnumType]
                    $[capture entityScope]$[if attribute.type.hasParentEntity]${attribute.type.parentEntity|domain:JSONDTO|name}.$[/if]$[/capture]
        ${indent}dtoObject.set${dtoAttributeNameInMethod}(modelObject != null ? modelObject.get${modelAttributeNameInMethod}() : null);
                $[else]$[* !attribute.type.isEnumType *]
$[* we need to consider the data type here *]
                    $[capture ending]$[/capture]
                    $[capture beginning]$[/capture]
                    $[capture getname]get$[/capture]
                    $[if ! attribute.type|language hasNullable]
                        $[switch attribute.type]
                            $[case boolean]$[capture ending]$[/capture]$[capture getname]is$[/capture]
                            $[default]$[capture ending]$[/capture]
                        $[/switch]
                    $[/if]
        ${indent}dtoObject.set${attribute|domain:JSONDTO|name|capitalize}(${beginning}(modelObject != null ? modelObject.${getname}${attribute|domain:Model|name|capitalize}() : null)${ending});
                $[/if]
            $[/if]
            $[if nullable]
        }
            $[/if]
        $[/foreach]$[* attribute *]
$[** RELATIONSHIPS **]
        $[let showRelationshipComment = true]
        $[foreach relationship in (entity|domain:JSONDTO|view:APIGet).relationships]
            $[if relationship.to.isOne && relationship.withViewName == "Reference"]
                $[let _toEntity = relationship.to.entity]
                $[let includeChildEntities = _toEntity.entity.space.name == entity.space.name && ! _toEntity.entity.isIncluded]
                $[if ! includeChildEntities]$[continue]$[/if]
                $[if showRelationshipComment]
        // relationships
                    $[let showRelationshipComment = false]
                $[/if]
                $[let _toEntityMapperClassName = _toEntity|domain:DTOMapper|name]
                $[let _toEntityMapperVariableName = _toEntityMapperClassName|uncapitalize]
$[send mapperDecl]
    @Autowired ${_toEntityMapperClassName} ${_toEntityMapperVariableName};
$[/send]
$[send imports]
import ${_toEntity|domain:Model|fullname};
$[/send]
        if (modelObject != null && modelObject.get${relationship|domain:Model|name|capitalize}Id() != ${_toEntity.pkType.isUUIDType ? "null":"0"}) {
            ${_toEntity|domain:Model|name} refObject = new ${_toEntity|domain:Model|name}();
            refObject.set${_toEntity.primaryKeyAttribute|domain:Model|name|capitalize}(modelObject.get${relationship|domain:Model|name|capitalize}Id());
            dtoObject.set${relationship|name|capitalize}(${_toEntityMapperVariableName}.toDtoFromModel(refObject));
        }
            $[/if]
        $[/foreach]
        return dtoObject;
    }

$[********************************************************************
    MODEL <== JSONDTO
  ********************************************************************]
    public ${modelDomainEntity|name} toModelFromDto(${dtoDomainEntity|name} dtoObject) {
        // for now do this, but since names can be quite different potentially we should
        // really do attribute by attribute code like the others.
        return mapper.map(dtoObject, ${modelDomainEntity|name}.class);
    }
}

    $[/file]
$[/function]

$[foreach space.modules]
    $[if module.isIncluded]$[continue]$[/if]
    $[foreach module.entities]
        $[if entity.isImplicit || entity.isExtern || entity.isIncluded || entity.isTransient]$[continue]$[/if]
        $[call makeMapper(domain:domain,entity:entity,space:space)]
    $[/foreach]$[* entity *]
$[/foreach]$[* module *]
