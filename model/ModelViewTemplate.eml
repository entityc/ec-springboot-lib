$[ language java ]
$[ domain Model 
   foreach space.modules 
       if module.isIncluded ]$[ continue ]$[ endif 
       foreach space.entities 
           if entity.isImplicit || entity.isExtern ]$[ continue ]$[ endif 
           foreach view in entity.views 
               if !view.hasForeignAttributes() && !entity.isSecondary ]$[ continue ]$[ endif 
               file domain.namespace|path view|domain|name "java" ]
//
// This is the Model class for view:
//
//   Name:        ${view|domain|name}
                $[ if view.hasDescription ]
//   Description: ${view.description|wrap}
                $[ else 
                       capture viewDescription ]This view extends the `${entity.name}` entity to include fields from associated entities.$[ endcapture ]
//   Description: ${viewDescription|wrap}
                $[ endif ]
//
// THIS FILE IS GENERATED. DO NOT EDIT!!
//
package ${domain.namespace};

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Table;
import javax.persistence.Embeddable;
import javax.persistence.Embedded;
import javax.persistence.AttributeOverrides;
import javax.persistence.AttributeOverride;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.Type;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
                $[ foreach view.attributes 
                       if attribute.type.isEnumType ]
import ${attribute.type|domain:Model|fullname};
                    $[ endif 
                   endforeach ]

                $[ if entity.isSecondary ]
@Embeddable
@Data
@NoArgsConstructor
@AllArgsConstructor
                $[ else ]
@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "${view|domain:Database|name}")
                $[ endif ]
public class ${view|domain|name}
{
                $[ if entity.hasPrimaryKey ]
    @Id
                    $[ if entity.pkType.isUUIDType ]
    @Type(type="pg-uuid")
                    $[ endif ]
    @Column(name = "${entity.primaryKeyAttribute|domain:Database|name}")
    private ${entity.pkType|language} ${entity.primaryKeyAttribute|domain|name};

                $[ endif 
                   foreach view.attributes 
                       if entity.hasPrimaryKey 
                           if attribute.name == entity.primaryKeyAttribute.name ]$[ continue ]$[ endif 
                       endif 
                       let domainAttributeName = attribute|domain:Database|name 
                       if attribute.hasDescription ]
    // ${attribute.description}
                    $[ endif 
                       if attribute.isArray 
                           let joinColumnName = view.entity.primaryKeyAttribute|domain:Database|name 
                           capture collectionTableName ]${view|domain:Database|name}_${attribute|domain:Database|name}$[ endcapture 
                           if view.isAttributeReference(attribute.name) 
                               let attributeReference = view.getAttributeReference(attribute.name) 
                               let joinColumnName = attributeReference.resolvedEntity.primaryKeyAttribute|domain:Database|name 
                               capture collectionTableName ]${attributeReference.resolvedEntity|domain:Database|name}_${attributeReference.resolvedAttribute|domain:Database|name}$[ endcapture 
                           endif ]
    @ElementCollection(fetch=FetchType.EAGER)
    @Fetch(FetchMode.SUBSELECT)
    @CollectionTable(
            name = "${collectionTableName}",
            joinColumns = @JoinColumn(name = "${joinColumnName}")
    )
    @Column(name = "value")
    private Set<${attribute.type|language}> ${attribute|domain|name} = new HashSet<>();
                    $[ else 
                           let attrClassName = attribute.type|language 
                           if attribute.isSecondaryEntityType() 
                               if !attribute.getTypeEntity().hasViewWithName(view.name) 
                                   log fatal ]Entity ${(attribute.getTypeEntity()).name} must have view: ${view.name}$[ endlog 
                                   continue 
                               endif 
                               let secondaryEntityView = attribute.getTypeEntity().getViewWithName(view.name) 
                               let attrClassName = secondaryEntityView|domain|name ]
    @AttributeOverrides({
                            $[ foreach secondaryAttribute in secondaryEntityView.attributes ]
            @AttributeOverride(name="${secondaryAttribute|domain:Model|name}", column=@Column(name="${domainAttributeName}_${secondaryAttribute|domain:Database|name}"))$[ if !secondaryAttribute#last ],$[ endif ]

                            $[ endforeach ]
    })
    @Embedded
                        $[ elseif attribute.isCreation ]
    @Column(name = "${domainAttributeName}", insertable = false, updatable = false)
                        $[ elseif attribute.isModification ]
    @Column(name = "${domainAttributeName}", insertable = false, updatable = false)
                        $[ elseif attribute.isSequential ]
    @Column(name = "${domainAttributeName}", insertable = false, updatable = false)
                        $[ else ]
    @Column(name = "${domainAttributeName}")
                        $[ endif 
                           switch attribute.type 
                               case uuid ]
    @Type(type="pg-uuid")
                            $[ default 
                           endswitch ]
    private ${attrClassName} ${attribute|domain|name};
                    $[ endif ]

                $[ endforeach 
                   foreach view.relationships 
                       if !relationship.to.isOne ]$[ continue ]$[ endif ]
    @Column(name = "${relationship|domain:Database|name}_id")
                    $[ switch relationship.to.entity.primaryKey.type 
                           case uuid ]
    @Type(type="pg-uuid")
                        $[ default 
                       endswitch ]
    ${relationship.to.entity.primaryKey.type|language} ${relationship|domain|name}Id;

                $[ endforeach ]
}
            $[ endfile 
           endforeach ]
    $[ endforeach ]$[ endforeach ]