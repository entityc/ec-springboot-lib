$[ language json_postman 
   D summary "Generates the Postman configuration for your endpoints." 
   D "Postman is a nice tool for hitting your endpoints directly. However, it can take a long time to" 
   D "configure it for each of your endpoints. That's where this template is great, it generates" 
   D "the Postman configuration file specific to the endpoints generated by the" 
   D "ControllerTemplate!" 
   D "<br/>
### Template Configuration

There are a number of ways to configure how the template generates the Postman configuration.

When declaring this template in your `configuration {}` block, inside the `template PostmanConfig {}` block add a `config{}` block with the values for the below parameters set.

#### Login

Most server applications have a login endpoint where you login with a username and password and it returns a token that you can then use for authentication for each subsequent access. The template will generate a configuration for a login endpoint and can be configured with the following template config parameters:

| Template Config Parameter | Description |
|-----|-----|
| `loginUrlPath` | After the hostname, this is the URL path to be used for the login endpoint. |
| `loginBody` | Typically the body is where some authentication related values go like a username and password. |

The URL for the login endpoint will look like this:

`http://{{secureHostnamePrefix}}{{hostname}}/`*loginUrlPath*

where `secureHostnamePrefix` and `hostname` are **Postname** configuration parameters. This allow you to more easy change to different servers from within Postman. The `secureHostnamePrefix` is provided in case the login hostname is different than for the main endpoints and requires a prefix to the hostname.

#### Main Endpoints

The template can be configured with the following input parameters:

| Template Config Parameter | Description |
|-----|-----|
| `apiName` | The first portion of the endpoint URLs (see below) |
| `title` | A title for this Postman configuration. |
| `description` | A description of this Postman configuration. |
| `postmanId` | A UUID that you want to associate with the configuration. Postman uses this to uniquely identify this configuration so if you load the configuration again it will replace the existing one that has this ID.|

The endpoints generated will all start as follows:

`https://{{hostname}}/`*apiName*`/`...

Where `{{hostname}}` is a **Postman** configuration parameter. This means that when you are using a configuration generated by this template, you can switch to a different server simply by choosing a different value for `hostname` right within Postman. This allows you to reuse this generationed configuration file for multiple servers where you are hosting your application.
" 
   file "" "PostmanConfig" "json" ]{
	"info": {
		"_postman_id": "${postmanId}",
		"name": "${title}",
		"description": "${description}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bb4487d8-2737-40fc-80f0-3900ff749869",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"token\", jsonData.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "${loginBody}"
				},
				"url": {
					"raw": "http://{{secureHostnamePrefix}}{{hostname}}/${loginUrlPath}",
					"protocol": "http"
				}
			},
			"response": []
		}
    $[ foreach space.entities 
           if entity.isSecondary || entity.isImplicit || entity.isExtern || entity.isIncluded ]$[ continue ]$[ endif 
           let className = entity|domain:Controller|name 
           let modelName = entity|domain:Model|name 
           let serviceClassName = entity|domain:Service|name 
           let dtoClassName = entity|domain:JSONDTO|name 
           let apiDomainEntity = entity|domain:APIPath 
           let apiPathName = apiDomainEntity|name 
           /* CREATE BY ID - assuming NO parent */ ]
		, {
			"name": "${entity|title} - CREATE",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "${entity|domain:JSONDTO|json escaped}"
				},
				"url": {
					"raw": "http://{{hostname}}/${apiName}/${apiPathName}",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"${apiName}",
						"${apiPathName}"
					]
				}
			},
			"response": []
		}
		, {
			"name": "${entity|title} - GET by ID",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{hostname}}/${apiName}/${apiPathName}/uuid",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"${apiName}",
						"${apiPathName}",
						"uuid"
					]
				}
			},
			"response": []
		}
		, {
			"name": "${entity|title} - GET LIST",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{hostname}}/${apiName}/${apiPathName}",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"${apiName}",
						"${apiPathName}"
					],
					"query": [
						{
							"key": "start",
							"value": "0",
							"description": "The first index of the full list to return."
						},
						{
							"key": "limit",
							"value": "500",
                            "description": "The maximum items to return."
						}
					]
				}
			},
			"response": []
		}
        $[ if entity.hasPrimaryParentRelationship 
               foreach entity.relationships 
                   if relationship.isParent ]
		, {
			"name": "${entity|title} - CREATE with ${relationship.name|uppercase}",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "${entity|domain:JSONDTO|json escaped}"
				},
				"url": {
					"raw": "http://{{hostname}}/${apiName}/${apiDomainEntity.name}/${relationship|domain:APIPath|name}/uuid",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"${apiName}",
						"${apiPathName}",
						"${relationship|domain:APIPath|name}",
						"uuid"
					]
				}
			},
			"response": []
		}
		, {
			"name": "${entity|title} - GET LIST by ${relationship.name|uppercase}",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{hostname}}/${apiName}/${apiDomainEntity.name}/${relationship|domain:APIPath|name}/uuid",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"${apiName}",
						"${apiPathName}",
						"${relationship|domain:APIPath|name}",
						"uuid"
					],
					"query": [
						{
							"key": "start",
							"value": "0",
							"description": "The first index of the full list to return."
						},
						{
							"key": "limit",
							"value": "500",
                            "description": "The maximum items to return."
						}
					]
				}
			},
			"response": []
		}
                $[ endif 
               endforeach 
           endif 
           if false && entity.isBatchable 
               foreach entity.relationships ]$[ if !relationship.isParent ]$[ continue ]$[ endif ]
		, {
			"name": "${entity|title} - CREATE with ${relationship.name|uppercase} as BATCH",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
                $[ capture createNoParentsJson ]${entity|domain:JSONDTO|json escaped}$[ endcapture ]
					"raw": "{\n    \"${relationship.name}Id\" : \"uuid\",\n    \"items\" : [\n        ${createNoParentsJson},\n        ${createNoParentsJson}\n    ]\n}"
				},
				"url": {
					"raw": "http://{{hostname}}/${apiName}/${apiPathName}/${relationship|domain:APIPath|name}/uuid/batch",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"${apiName}",
						"${apiPathName}",
						"${relationship|domain:APIPath|name}",
						"uuid",
						"batch"
					]
				}
			},
			"response": []
		}
            $[ endforeach 
           endif 
           foreach entity.attributes 
               if !attribute.type.isAssetType ]$[ continue ]$[ endif ]
		,{
			"name": "${entity|title} - ${attribute.name|title} Upload",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"value": null,
							"type": "file"
						}
					]
				},
				"url": {
					"raw": "http://{{hostname}}/${apiName}/${apiPathName}/uuid/${attribute|domain:APIPath|name}",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"${apiName}",
						"${apiPathName}",
						"uuid",
						"${attribute|domain:APIPath|name}"
					]
				}
			},
			"response": []
		}
        $[ endforeach 
       endforeach ]
	]
}
$[ endfile ]