$[ language java ]
$[ domain Service 
   D summary, main "Adds version release related methods to an entity's service class." 
   D "It only does this for entities that represent the top of a special tag-based release" 
   D "structure of entities." ]


$[ import "service/ServiceFunctions" 
   import "release/ReleaseFunctions" 
   import "util/AutoWired" ]

$[ author to org.entityc.springboot.service.update 
       author to outlet aboveSave 
           call getReleaseEntityForVersionEntity(versionEntity: entity)->(releaseEntity: releaseEntity) 
           let versionWithIsLock = releaseEntity != null && releaseEntity.hasAttributeTagged("release:lock") 
       endauthor 
       author to outlet saveTop 
           import "util/AutoWired" 
           if versionWithIsLock 
   send imports ]
import ${exceptionNamespace}.UnauthorizedException;
$[ endsend ]
           // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
            Boolean isLocked = ${repositoryVariableName}.is${entity|domain:Model|name}Locked(object.getId());
            if (isLocked != null && isLocked) {
                throw new UnauthorizedException("The parent ${topReleaseEntity.name|words} object is locked.");
            }
        $[ elseif entity.hasTag("release:top") && entity.hasAttributeTagged("release:lock") 
               let lockAttribute = entity.attributeTagged("release:lock") 
   send imports ]
import ${exceptionNamespace}.UnauthorizedException;
$[ endsend ]
            // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
            if (object.getId() != null) {
                // throw an an exception if an attempt to modify a locked object.
                Optional<${modelName}> checkObjectOptional = ${repositoryVariableName}.findById(object.getId());
                if (checkObjectOptional.isPresent() && checkObjectOptional.get().get${lockAttribute|domain:Model|name|capitalize}()) {
                    throw new UnauthorizedException("This ${entity|name|words} object is locked.");
                }
            }
        $[ elseif entity.hasTag("release:binder") && entity.hasPrimaryParentRelationship && entity.primaryParentRelationship.to.entity.hasAttributeTagged("release:lock") 
   send imports ]
import ${exceptionNamespace}.UnauthorizedException;
import ${exceptionNamespace}.ValidationException;
$[ endsend 
               let parentEntity = entity.primaryParentRelationship.to.entity 
               let lockAttribute = parentEntity.attributeTagged("release:lock") 
               if parentEntity.name != entity.name 
                   call addAutoWired(domainEntity: parentEntity|domain:Repository) 
   send imports ]
import ${parentEntity|domain:Model|fullname};
$[ endsend 
               endif ]
            // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
            if (object.get${entity.primaryParentRelationship|domain:Model|name|capitalize}Id() == null) {
                throw new ValidationException("Reference to the ${entity.primaryParentRelationship.to.entity.name|words} object was null.");
            }
            // need to throw an exception if the parent ${entity.primaryParentRelationship.to.entity.name} object is locked.
            Optional<${parentEntity|domain:Model|name}> parentObjectOptional = ${parentEntity|domain:Repository|name|uncapitalize}.findById(object.get${entity.primaryParentRelationship|domain:Model|name|capitalize}Id());
            if (parentObjectOptional.isPresent() && parentObjectOptional.get().get${lockAttribute|domain:Model|name|capitalize}()) {
                throw new UnauthorizedException("The parent ${parentEntity|name|words} object is locked.");
            }
        $[ endif 
       endauthor 
   endauthor 
   /*
  * ADD METHODS TO RELEASE CLASS
  */ 
   author to org.entityc.springboot.service ]

    $[ /* CLEAR RELEASE */ 
       author to outlet methods
       D "Adds method that Deletes all linked element versions from a release."
    
           call lookForReleaseStructure(topReleaseEntity: entity)->(results: releaseStructure) 
           if releaseStructure != null ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    public void clearRelease(UUID releaseId) throws ServiceException {
            $[ foreach rs in releaseStructure 
                   let binderEntity = rs.get(0) 
                   let repositoryDomainEntity = binderEntity|domain:Repository 
                   let repositoryVariableName = repositoryDomainEntity|name|uncapitalize 
                   call addAutoWired(domainEntity: repositoryDomainEntity) ]
        ${repositoryVariableName}.delete${binderEntity.name}By${binderEntity.singleParentRelationship.name|capitalize}Id(releaseId);
            $[ endforeach ]
    }
        $[ endif 
       endauthor ]

    $[ /* POPULATE WITH LATEST */ 
       author to outlet methods
       D "Adds method that populates the release with the latest versions of all elements associated"
       D "with a release."
    
           call lookForReleaseStructure(topReleaseEntity: entity)->(results: releaseStructure) 
           if releaseStructure != null 
               let sentObjectParentPK = false 
               let extraIdVarName = null 
               let extraIdDecl = null ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    private void populateReleaseWithLatestVersions(UUID releaseId$[ receive distinct objectParentPKDecl ]) throws ServiceException {
            $[ foreach rs in releaseStructure 
                   let binderEntity = rs.get(0) 
                   let objectEntity = rs.get(1) 
                   let versionedEntity = rs.get(2) 
                   let repositoryDomainEntity = versionedEntity|domain:Repository 
                   let repositoryVariableName = repositoryDomainEntity|name|uncapitalize 
   send imports ]
import ${versionedEntity|domain:Model|fullname};
import ${binderEntity|domain:Model|fullname};
$[ endsend 
                   call addAutoWired(domainEntity: repositoryDomainEntity) 
                   let objectParentEntity = objectEntity.primaryParentRelationship.to.entity 
                   if objectParentEntity != null 
                       call hasRelationshipWithEntityTagged(fromEntity: objectParentEntity, tag: "release:top")->(result: hasRelationshipWithReleaseTop) 
                       if !hasRelationshipWithReleaseTop 
                           let objectParentEntity = null 
                       endif 
                   endif 
                   let nvpePrimaryKeyAttr = null 
                   let nvpePrimaryKeyAttributeDomainName = "" 
                   let methodNameSuffix = "" 
                   if objectParentEntity != null 
                       let nvpePrimaryKeyAttr = objectParentEntity.primaryKeyAttribute 
                       let nvpePrimaryKeyAttributeDomainName = nvpePrimaryKeyAttr|domain|name|uncapitalize 
                       capture methodNameSuffix ]For${objectParentEntity.name}$[ endcapture 
                       if !sentObjectParentPK 
                           capture extraIdVarName ], ${nvpePrimaryKeyAttr|domain|name}$[ endcapture 
                           capture extraIdDecl ], ${nvpePrimaryKeyAttr.type|language} ${nvpePrimaryKeyAttr|domain|name}$[ endcapture 
   send objectParentPKDecl ]${extraIdDecl}$[ endsend 
                           let sentObjectParentPK = true 
                       endif 
                   endif ]
        {
            List<${versionedEntity|domain:Model|name}> versions = ${repositoryVariableName}.getLatestVersions${methodNameSuffix}(${nvpePrimaryKeyAttributeDomainName});
            for(${versionedEntity|domain:Model|name} version : versions) {
                ${binderEntity|domain:Model|name} release = new ${binderEntity|domain:Model|name}();
                release.set${objectEntity.primaryKeyAttribute|domain|name|capitalize}(version.get${objectEntity.primaryKeyAttribute|domain|name|capitalize}());
                release.set${versionedEntity.primaryKeyAttribute|domain|name|capitalize}(version.get${versionedEntity.primaryKeyAttribute|domain:Model|name|capitalize}());
                release.set${binderEntity.singleParentRelationship.to.entity|domain:Model|name}Id(releaseId);
                $[ call addAutoWired(domainEntity: binderEntity|domain:Service) ]
                ${binderEntity|domain:Service|name|uncapitalize}.create${binderEntity|domain:Model|name}(release);
            }
        }
            $[ endforeach ]
    }

            $[ /* RESET TO LATEST VERSIONS */ ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    public void resetReleaseToLatestVersions(UUID releaseId${extraIdDecl}) throws ServiceException {
        clearRelease(releaseId);
        populateReleaseWithLatestVersions(releaseId${extraIdVarName});
    }
        $[ endif 
       endauthor ]

    $[ /* POPULATE FROM ANOTHER RELEASE */ 
       author to outlet methods
       D "Adds method that populates the release with another release."
    
           call lookForReleaseStructure(topReleaseEntity: entity)->(results: releaseStructure) 
           if releaseStructure != null 
               let sentObjectParentPK = false 
               let extraIdVarName = null 
               let extraIdDecl = null ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    private void populateReleaseWithRelease(UUID releaseId, UUID fromReleaseId$[ receive distinct objectParentPKDecl ]) throws ServiceException {
            $[ foreach rs in releaseStructure 
                   let binderEntity = rs.get(0) 
                   let objectEntity = rs.get(1) 
                   let versionedEntity = rs.get(2) 
                   let repositoryDomainEntity = binderEntity|domain:Repository 
                   let repositoryVariableName = repositoryDomainEntity|name|uncapitalize 
   send imports ]
import ${versionedEntity|domain:Model|fullname};
import ${binderEntity|domain:Model|fullname};
$[ endsend 
                   call addAutoWired(domainEntity: repositoryDomainEntity) 
                   let objectParentEntity = objectEntity.primaryParentRelationship.to.entity 
                   if objectParentEntity != null 
                       call hasRelationshipWithEntityTagged(fromEntity: objectParentEntity, tag: "release:top")->(result: hasRelationshipWithReleaseTop) 
                       if !hasRelationshipWithReleaseTop 
                           let objectParentEntity = null 
                       endif 
                   endif 
                   let nvpePrimaryKeyAttr = null 
                   let nvpePrimaryKeyAttributeDomainName = "" 
                   let methodNameSuffix = "" 
                   if objectParentEntity != null 
                       let nvpePrimaryKeyAttr = objectParentEntity.primaryKeyAttribute 
                       let nvpePrimaryKeyAttributeDomainName = nvpePrimaryKeyAttr|domain|name|uncapitalize 
                       capture methodNameSuffix ]For${objectParentEntity.name}$[ endcapture 
                       if !sentObjectParentPK 
                           capture extraIdVarName ], ${nvpePrimaryKeyAttr|domain|name}$[ endcapture 
                           capture extraIdDecl ], ${nvpePrimaryKeyAttr.type|language} ${nvpePrimaryKeyAttr|domain|name}$[ endcapture 
   send objectParentPKDecl ]${extraIdDecl}$[ endsend 
                           let sentObjectParentPK = true 
                       endif 
                   endif ]
        {
            List<${binderEntity|domain:Model|name}> versionReleases = ${repositoryVariableName}.get${binderEntity|domain:Model|name}ListBy${entity|domain:Model|name}(fromReleaseId, 0, Integer.MAX_VALUE);
            for(${binderEntity|domain:Model|name} versionRelease : versionReleases) {
                ${binderEntity|domain:Model|name} release = new ${binderEntity|domain:Model|name}();
                release.set${objectEntity.primaryKeyAttribute|domain|name|capitalize}(versionRelease.get${objectEntity.primaryKeyAttribute|domain|name|capitalize}());
                release.set${versionedEntity.primaryKeyAttribute|domain|name|capitalize}(versionRelease.get${versionedEntity.primaryKeyAttribute|domain|name|capitalize}());
                release.set${binderEntity.singleParentRelationship.to.entity|domain:Model|name}Id(releaseId);
                $[ call addAutoWired(domainEntity: binderEntity|domain:Service) ]
                ${binderEntity|domain:Service|name|uncapitalize}.create${binderEntity|domain:Model|name}(release);
            }
        }
            $[ endforeach ]
    }

            $[ /* RESET RELEASE WITH OTHER RELEASE */ ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    public void resetReleaseWithOtherRelease(UUID releaseId, UUID fromReleaseId${extraIdDecl}) throws ServiceException {
        clearRelease(releaseId);
        populateReleaseWithRelease(releaseId, fromReleaseId${extraIdVarName});
    }
        $[ endif ]

    $[ endauthor ]

    $[ author to get outlet methods
       D "Adds methods related to locking." 
           if entity.hasAttributeTagged("release:lock") 
               call lookForReleaseStructure(topReleaseEntity: entity)->(results: releaseStructure)
        
               if releaseStructure != null ]
    // [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
    public List<${responseDtoName}> getLocked${responseDtoName}List(long start, int limit, int levels) throws ServiceException {
        try {
            List<${responseDtoName}> dtoList = new ArrayList<>();
            List<${responseModelName}> list = ${entity|domain:Repository|name|uncapitalize}.getLocked${responseModelName}List(start, limit);
            for(${responseModelName} modelObject : list) {
                dtoList.add(dtoFromModel(modelObject, levels));
            }
            return dtoList;
        } catch (DataAccessException ex) {
            throw new DaoException(ex.getMessage(), ex);
        }
    }

            $[ endif 
           endif 
       endauthor 
       author to get outlet parentRelationship scope = publisher 
           if entity.hasAttributeTagged("release:lock") 
               call lookForReleaseStructure(topReleaseEntity: entity)->(results: releaseStructure) 
               if releaseStructure != null 
                   let getFlavor = "Locked" 
               endif 
           endif 
       endauthor 
   endauthor ]

