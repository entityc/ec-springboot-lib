$[D summary, main "This template contains the author that is responsible for generating the create object"]
$[D summary, main "service methods."]
$[D "**Create**"]
$[D ""]
$[D "The create method is called by create endpoints implemented in the controller class. This"]
$[D "method in turn calls a create method in the repository class however before that it will"]
$[D "assign a UUID primary key. This is also where it places some of the in-memory caching code. It"]
$[D "will also set relationships associated with the logged in (principle) user."]
$[publisher org.entitycompiler.springboot.service.create]
    $[import "service/ServiceFunctions"]
    $[import "util/AutoWired"]
    $[author to org.entitycompiler.springboot.service]
        $[author to outlet methods]
$[send imports]
import java.util.UUID;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;
import ${exceptionNamespace}.ServiceException;
$[/send]
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public ${modelName} create${modelName}(${modelName} object) throws ServiceException {
            $[if entity.hasPrimaryKey && entity.pkType.isUUIDType]
        object.setId(UUID.randomUUID());
            $[/if]
            $[call setCreatedByUserFields()]
        ${modelName} savedObject = this.save${entity.name}(object);
$[outlet saved
  D "The object, in variable `savedObject`, has just be created and saved to persistent storage"
  D "by the simple create object service method."
]
$[/outlet]
        return savedObject;
    }

        $[/author]
        $[author to outlet methods
          D "**Create With Parent** A create method is generated where the ID of a parent object is"
          D "specified. This in turn calls a create method in the repository class however before that it"
          D "will assign a UUID primary key. It will also set relationships associated with the logged in"
          D "(principle) user."
        ]
            $[if entity.hasPrimaryParentRelationship]
                $[foreach relationship in entity.relationships]
                    $[if !relationship.to.isOne]$[continue]$[/if]
                    $[let toPrimaryKeyName = relationship.to.entity.primaryKeyAttribute.name]
                    $[if relationship.isParent && !relationship.isOptional]
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public ${modelName} create${modelName}With${relationship.name|capitalize}(${relationship.to.entity.pkType|language} ${toPrimaryKeyName}, ${modelName} object) throws ServiceException {
                        $[if entity.hasPrimaryKey && entity.pkType.isUUIDType]
        object.setId(UUID.randomUUID());
                        $[/if]
                        $[call setCreatedByUserFields()]
        object.set${relationship.name|capitalize}Id(${toPrimaryKeyName});
        ${modelName} savedObject = this.save${entity.name}(object);
$[outlet saved
  D "The object, in variable `savedObject`, has just be created and saved to persistent storage"
  D "by the create object by parent service method."
]
$[/outlet]
        return savedObject;
    }

                    $[/if]
                $[/foreach]
            $[/if]
        $[/author]
        $[author to outlet methods
          D "**Associate To** This method allows the association between two entities that have a"
          D "many-to-many relationship to be created."
        ]
            $[foreach relationship in entity.implicitRelationships]
                $[if relationship.to.entity.hasTag("internal:many-to-many")]
                    $[let manyToManyEntity = relationship.to.entity]
                    $[let destMMEntity = null]
                    $[foreach mmRel in manyToManyEntity.implicitRelationships]
                        $[if mmRel.to.entity.name != entity.name]
                            $[let destMMEntity = mmRel.to.entity]
                            $[break];
                        $[/if]
                    $[/foreach]
                    $[let destModelName = destMMEntity|domain:Model|name]
                    $[let destRepoEntityName = destMMEntity|domain:Repository|name]
                    $[let destRepoVarName = destRepoEntityName|uncapitalize]
                    $[let sourcePKType = entity.pkType|language]
                    $[let sourcePKVarName = entity.primaryKeyAttribute|domain|name]
                    $[let destPKType = destMMEntity.pkType|language]
                    $[let destPKVarName = destMMEntity.primaryKeyAttribute|domain|name]
$[send imports]
import ${destMMEntity|domain:Model|fullname};
$[/send]
                    $[call addAutoWired(domainEntity:destMMEntity|domain:Repository)]

    public void associateTo${destModelName}(${sourcePKType} ${sourcePKVarName}, ${destPKType} ${destPKVarName}) throws ServiceException {
        Optional<${modelName}> modelObjectOptional = ${repositoryVariableName}.findById(${sourcePKVarName});
        if (!modelObjectOptional.isPresent()) {
            throw new EntityNotFoundException("${modelName} not found.");
        }

        Optional<${destModelName}> otherModelObjectOptional = ${destRepoVarName}.findById(${destPKVarName});
        if (!otherModelObjectOptional.isPresent()) {
            throw new EntityNotFoundException("${destModelName} not found.");
        }
        if (!${repositoryVariableName}.isAssociatedTo${destModelName}(${sourcePKVarName}, ${destPKVarName}) ) {
            ${repositoryVariableName}.addAssociationTo${destModelName}(${sourcePKVarName}, ${destPKVarName});
        }
    }
                $[/if]
            $[/foreach]
        $[/author]
    $[/author]
$[/publisher]
