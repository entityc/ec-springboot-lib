$[language java]
$[domain Service]
$[import "service/ServiceFunctions"]
$[import "util/AutoWired"]
$[author to org.entitycompiler.springboot.service]
    $[author to outlet methods]
        $[function uploadAssetFile
          (entity,
           collectionAttribute,
           attribute,
           modelName,
           modelVariableName
          )]
            $[let hasCollection = collectionAttribute != null]
            $[if hasCollection]
                $[let collectionName = collectionAttribute|domain:Model|name]
            $[/if]
            $[if attribute.secondaryEntityIsTagged("asset:file")]
$[send imports]
$[let serviceNamespace = entity.space.domain("Service").namespace]
import ${serviceNamespace}.asset.BinaryPersistence;
import ${serviceNamespace}.asset.Metadata;
import java.io.ByteArrayInputStream;
$[/send]
                $[let secondaryAttributeEntity = attribute.getTypeEntity()]
                $[let secondaryAttributeEntityClassName = secondaryAttributeEntity|domain:Model|name]
                $[let includeHash = secondaryAttributeEntity.hasTag("hashed") && secondaryAttributeEntity.hasAttributeTagged("md5")]
                $[let attributeNameCapitalized = attribute|domain:Model|name|capitalize]
                $[let methodName = attribute|domain:Model|name|capitalize]
                $[if hasCollection]
                    $[capture methodName]${collectionName|capitalize}${methodName}$[/capture]
                $[/if]
    /**
        Uploads a file associated with the ${attribute.name} attribute.
        [Template] ${__template.name}:${__outlet.name} < ${__author.template.name}
     */
    public void upload${methodName}(${modelName} ${modelVariableName}, String contentType, byte[] dataArray, String fileExtension) throws ServiceException {
$[* TODO: Handle constraints here *]
        final ByteArrayInputStream is = new ByteArrayInputStream(dataArray);
        final Metadata metadata = new Metadata(dataArray.length, contentType);
                $[let assetName = attribute|domain:Model|name]
                $[if hasCollection]
                    $[capture assetName]${collectionName}-${assetName}$[/capture]
                $[/if]
        final String filename = "${entity|domain:APIPath|name}/" + ${modelVariableName}.get${entity.primaryKeyAttribute|domain:Model|name|capitalize}() + "/${assetName}" + (fileExtension != null ? ("." + fileExtension) : "");

        binaryPersistence.save(bucketName, filename, is, metadata);

$[send imports]
import ${secondaryAttributeEntity|domain:Model|fullname};
$[/send]
        ${secondaryAttributeEntityClassName} asset = new ${secondaryAttributeEntityClassName}();
                $[if secondaryAttributeEntity.hasAttributeTagged("url")]
        asset.set${secondaryAttributeEntity.attributeTagged("url")|name|capitalize}(binaryPersistence.getUrl(bucketName, filename));
                $[/if]
                $[if secondaryAttributeEntity.hasAttributeTagged("path")]
        asset.set${secondaryAttributeEntity.attributeTagged("path")|name|capitalize}(filename);
                $[/if]
                $[if secondaryAttributeEntity.hasAttributeTagged("bucketName")]
        asset.set${secondaryAttributeEntity.attributeTagged("bucketName")|name|capitalize}(bucketName);
                $[/if]
                $[if secondaryAttributeEntity.hasAttributeTagged("size")]
        asset.set${secondaryAttributeEntity.attributeTagged("size")|name|capitalize}(Long.valueOf(dataArray.length));
                $[/if]
                $[if includeHash]
$[send imports]
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
$[/send]
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] md5digest = md.digest(dataArray);
            asset.set${secondaryAttributeEntity.attributeTagged("md5")|name|capitalize}(md5digest);
        } catch (NoSuchAlgorithmException e) {
            throw new ServiceException("Not able to obtain MD5 message digest function.");
        }
                $[/if]
                $[if hasCollection]
                    $[let collectionEntity = attribute.entity]
$[send imports]
import ${collectionEntity|domain:Model|fullname};
$[/send]
        if (${modelVariableName}.get${collectionName|capitalize}() == null) {
            ${modelVariableName}.set${collectionName|capitalize}(new ${collectionEntity|domain:Model|name}());
        }
        ${modelVariableName}.get${collectionName|capitalize}().set${attribute|domain:Model|name|capitalize}(asset);
                $[else]
        ${modelVariableName}.set${attribute|domain:Model|name|capitalize}(asset);
                $[/if]

        save${modelName}(${modelVariableName});
    }

            $[/if]
        $[/function]
        $[foreach entity.attributes]
            $[if attribute.secondaryEntityIsTagged("asset:collection") || attribute.secondaryEntityIsTagged("asset:file")]
$[send imports]
import org.springframework.beans.factory.annotation.Value;
$[/send]
$[send memberDecl]
    @Autowired private BinaryPersistence binaryPersistence;
    @Value("${$}{aws.s3.bucket}") private String bucketName;
$[/send]
                $[break]
            $[/if]
        $[/foreach]
        $[foreach attribute in entity.attributes]
            $[if attribute.secondaryEntityIsTagged("asset:collection")]
                $[let secondaryAttributeEntity = attribute.getTypeEntity()]
                $[foreach secondaryAttribute in secondaryAttributeEntity.attributes]
                    $[call uploadAssetFile(modelName:modelName,collectionAttribute:attribute,attribute:secondaryAttribute,entity:entity,modelVariableName:modelVariableName)]
                $[/foreach]
            $[else]
                $[call uploadAssetFile(modelName:modelName,collectionAttribute:null,attribute:attribute,entity:entity,modelVariableName:modelVariableName)]
            $[/if]
        $[/foreach]
    $[/author]
$[/author]