$[ language java ]
$[ domain AdminUI ]
$[ D summary "This template generates an admin detail page for an entity." ]
$[ D "This template generates an admin detail page for an entity. It allows an admin to edit fields" ]
$[ D "of an object and create new objects of child (one-to-many relationship) entities." ]
$[ D detail "At the very top of the page is the same navigation bar from the home screen. The screen has other" ]
$[ D detail "features that you can customize." ]
$[ D detail "" ]
$[ D detail "### Breadcrumb Bar" ]
$[ D detail "" ]
$[ D detail "Just below the top navigation is what is referred to as a breadcrumb bar. This bar will allow" ]
$[ D detail "you to see the depth of screens you have traversed and let you click on a prior level to go back." ]
$[ D detail "Each depth (iten on the bar) represents some entity in your model. If a particular entity has a" ]
$[ D detail "one-to-many relationship with another entity, that represents another level. As the admin" ]
$[ D detail "goes to deeper levels items are added to the bar." ]
$[ D detail "" ]
$[ D detail "Each item in this bar is formatted as:

  *header* *number*`:` *title*

Where *header*, *number* and *title* correspond to tags that you place on an entity that can appear in the bar.

| Tag | Description
|---|---|
| `breadcrumb.header` | This is typically placed on an entity. |
| `breadcrumb.number` | This would be placed on a numeric attribute that represents some type of numbering for objects of this entity.|
| `breadcrumb.title` | This should be placed on an attribute that provides a name or title of the object.|

All tags are optional and which tags are used depend on how you want it to look as a breadcrumb item. For some" ]
$[ D detail "entities, for instance, it may be appropriate to just have a title." ]
$[ D detail "" ]
$[ D detail "### Headline

Below the breadcrumb bar is what is referred to as a Headline. It has the same three elements as a breadcrumb items:

  *header* *number*`:` *title*

You make an entity's headline be the same as how its breadcrumb item is formatted or you can make it different. The tags for the headline are:

| Tag | Description
|---|---|
| `headline.header` | This is typically placed on an entity. |
| `headline.number` | This would be placed on a numeric attribute that represents some type of numbering for objects of this entity.|
| `headline.title` | This should be placed on an attribute that provides a name or title of the object.|

Although the headline is composed of attributes that are shown and editable below it, it is in bigger font and let's you know what you are editing very clearly." ]
$[ D detail "" ]
$[ D detail "### Object Fields" ]
$[ D detail "" ]
$[ D detail "The next section of the page shows attributes (fields) of the page object as a table where the" ]
$[ D detail "first column is the attribute name and the second column is its value. The third column will" ]
$[ D detail "populate with an **Edit** button for fields that are not a creation or modification date." ]
$[ D detail "" ]
$[ D detail "String fields are by default considered just plain text. However, this template also" ]
$[ D detail "supports a string field that is to contain Markdown. For string fields that you want to" ]
$[ D detail "contain Markdown, simply tag those attributes in the `AdminUI` domain with `markdown`. Not" ]
$[ D detail "only will string values for these attributes be displayed as markdown (that is rendered to" ]
$[ D detail "HTML - with GitHub flavored style) but also will invoke a web based markdown editor when you" ]
$[ D detail "want to edit the field." ]
$[ D detail "" ]
$[ D detail "### Child Objects" ]
$[ D detail "" ]
$[ D detail "For each on-to-many relationship this entity has with other entites it can render a table for" ]
$[ D detail "each in this bottom section. Only the relationships that are tagged with `detail` will be" ]
$[ D detail "included. The fields of the child entity that are included in the generated table are those" ]
$[ D detail "attributes that are tagged with `summary`." ]
$[ D detail "" ]

$[ import "web/thymeleaf-bootstrap/WebPageFunctions" ]
$[ import "web/thymeleaf-bootstrap/modal/ModalFunctions" ]
$[ import "security/SecurityFunctions" ]

$[ publisher org.entityc.springboot.web.admin.detail ]
    $[ foreach entity in space.entities ]
        $[ if entity.isImplicit || entity.isExtern || entity.isIncluded || entity.isTransient || entity.isSecondary ]$[ continue ]$[/ if ]
        $[ let domainEntity = entity|domain ]
        $[ let filename = "admin/" + domainEntity.name + "_detail" ]
        $[ let pageTitle = (domainEntity|title) + " Detail" ]
        $[ let entityDtoClassName = entity|domain:JSONDTO|name|uncapitalize ]
        $[ file "resources/templates" filename "html" ]
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
            $[ call commonHead(title: pageTitle) ]
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/inscrybmde@1.11.6/dist/inscrybmde.min.css">
    <script src="https://cdn.jsdelivr.net/npm/inscrybmde@1.11.6/dist/inscrybmde.min.js"></script>
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/github-markdown-css@4.0.0/github-markdown.min.css">
    <script src="https://cdn.jsdelivr.net/npm/marked@4.0.0/marked.min.js"></script>
            $[ foreach attribute in entity.attributes ]
                $[ if attribute.secondaryEntityIsTagged("asset:file") ]
<link href="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.2.5/css/fileinput.min.css"
      media="all" rel="stylesheet" type="text/css" />
                    $[ break ]
                $[/ if ]
            $[/ foreach ]
</head>
<body>
            $[ call commonBodyScripts() ]
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.js"></script>

            $[ call commonBodyNavbar(backURL: null, title: pageTitle) ]
<br>
<br>
<div class="container">
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"> <a th:href="@{${adminUrlPrefix}}">Admin Home</a> </li>
            $[ if domainEntity.hasTag("home") ]
      <li class="breadcrumb-item"> <a th:href="@{${adminUrlPrefix}/${entity|domain:APIPath|name}}">${entity|title|plural}</a> </li>
            $[/ if ]
            $[ let parentNumber = 1 ]
            $[ foreach parentEntity in entity.primaryParentAncestory ]
                $[ call breadcrumbExpression(entity: parentEntity, dtoEntity: parentEntity|domain:JSONDTO)->(thExpression: breadcrumbExpression) ]
      <li class="breadcrumb-item"> <a th:href="@{${adminUrlPrefix}/${parentEntity|domain:APIPath|name}/{id}/detail(id=${$}{${parentEntity|domain:JSONDTO|name|uncapitalize}.id})}" th:text="${breadcrumbExpression}">link</a> </li>
                $[ let parentNumber = parentNumber + 1 ]
            $[/ foreach ]
      <li class="breadcrumb-item active" aria-current="page">${entity|title}</li>
    </ol>
  </nav>
            $[ call headlineExpression(dtoEntity: entity|domain:JSONDTO)->(thExpression: headlineExpression) ]
            $[ if headlineExpression != null ]
$[ outlet headlineButtonArea ]
    <h2 th:text="${headlineExpression}"></h2>
$[/ outlet ]
            $[/ if ]
	<div class="container">

$[*-----------------------------------------------------------------------------------------------------------------*]
            $[ function tableForEntity
               D "Generates a table row for a single attribute. This is in a function so it can be used for"
               D "secondary entity attributes."
               (entity,
                secondaryAttributeStack,
                dtoVariable,
                optShowMarkdownIcon
               )
            ]
                $[ let fieldWidthStyle = "20%" ]
                $[ let domainEntity = entity|domain:AdminUI ]
                $[ let entityVariablePrefix = entity|name|uncapitalize ]
	    <!-- Table for Entity: ${domainEntity|name} -->
		<table class="table">
                $[ if entity.isSecondary && secondaryAttributeStack != null && secondaryAttributeStack.count > 0 ]
                    $[ let secondaryAttribute = secondaryAttributeStack.last() ]
			<thead>
			<tr>
				<th th:text="#{${secondaryAttribute.attribute.entity|domain:StaticLocalization|name}.${secondaryAttribute|domain:StaticLocalization|name}}"></th>
			</tr>
			</thead>
                $[/ if ]
		<tbody>
$[* ATTRIBUTES *]
                $[ let domainAttributeList = domainEntity.declaredDomainAttributes ]
                $[ if domainAttributeList.isEmpty ]
                    $[ let domainAttributeList = domainEntity.attributes ]
                $[/ if ]
        <!-- Attributes -->
                $[ foreach domainAttribute in domainAttributeList ]
                    $[ if domainAttribute.hasTag("detail") || entity.isSecondary ]
                        $[ if domainAttribute.type.isEntityType ]
                            $[ let secondaryEntity = domainAttribute.attribute.typeEntity ]
                            $[ if secondaryEntity.hasTag("asset:file") ]
                                $[ let editModalType = "asset" ]
                                $[ let domainUrlAttribute = secondaryEntity.attributeTagged("url") ]
                                $[ let attributeName = dtoVariable + "." + domainAttribute.name ]
                                $[ let urlAttributeName = attributeName + "." + domainUrlAttribute.name ]
                                $[ capture canEditVariable ]canEdit${entity|name}$[/ capture ]
        <tr>
			<th th:text="#{${entity|domain:StaticLocalization|name}.${domainAttribute|domain:StaticLocalization|name}}" scope="col" style="width:${fieldWidthStyle}">${domainAttribute|title}</th>
            <td style="width:auto">
                <div class="mb-3">
                                $[ if domainAttribute.hasTag("image") ]
                  <img th:src="@{${$}{(${attributeName} == null || ${urlAttributeName} == null) ? '/images/default.png' : ${urlAttributeName}}}" width="128" height="128"/>
                                $[ else ]
                  <span th:text="@{${$}{(${attributeName} == null || ${urlAttributeName} == null) ? 'no file' : ${urlAttributeName}}}">
                                $[/ if ]
                </div>
            </td>
            <td style="width:1%">
            <button th:if="${$}{${canEditVariable}}" type="button" class="btn btn-primary"
                data-bs-toggle="modal" data-bs-target="#${editModalType}UploadModal" data-bs-field-name="${domainAttribute|name}"
                data-bs-field-title="${domainAttribute|title}">Edit</button>
            </td>
        </tr>
                            $[ else ]
        <tr>
            <td colspan="4">
                                $[ let attributeStack = secondaryAttributeStack != null ? secondaryAttributeStack:(@[]@) ]
                                $[ do attributeStack.add(domainAttribute) ]
                                $[ call tableForEntity(dtoVariable: dtoVariable + "." + (domainAttribute|domain:JSONDTO|name), optShowMarkdownIcon: optShowMarkdownIcon, entity: secondaryEntity, secondaryAttributeStack: attributeStack) ]
                                $[ do attributeStack.remove(domainAttribute) ]
            </td>
        </tr>
                            $[/ if ]
                        $[ else ]
		<tr>
			<th th:text="#{${entity|domain:StaticLocalization|name}.${domainAttribute|domain:StaticLocalization|name}}" scope="col" style="width:${fieldWidthStyle}">${domainAttribute|title}</th>
                            $[ if domainAttribute.hasTag("markdown") ]
                                $[ if optShowMarkdownIcon ]
			<td><img src="/images/MarkdownIcon.png" width="23" height="14"/></td>
                                $[/ if ]
			<td>
                                $[ let fieldName = domainAttribute|name ]
                                $[ if secondaryAttributeStack != null && secondaryAttributeStack.count > 0 ]
                                    $[ let fieldNamePrefix = "" ]
                                    $[ foreach item in secondaryAttributeStack ]
                                        $[ if !item#first ]$[ let fieldNamePrefix += "-" ]$[/ if ]
                                        $[ let fieldNamePrefix += item|name ]
                                    $[/ foreach ]
                                    $[ let fieldName = fieldNamePrefix + "-" + fieldName ]
                                $[/ if ]
			<input type="hidden" id="${fieldName}-hidden-value" th:value="${$}{${dtoVariable}.${domainAttribute.name}}"/>
			  <div id="${fieldName}-value" class="markdown-body"/>
              <script>
                document.getElementById('${fieldName}-value').innerHTML =
                  marked.parse(document.getElementById('${fieldName}-hidden-value').value, {pedantic: false, gfm: true});
              </script>
			</td>
                            $[ else ]
                                $[ if optShowMarkdownIcon ]
            <td></td>
                                $[/ if ]
                                $[ let fieldName = domainAttribute|name ]
                                $[ if secondaryAttributeStack != null && secondaryAttributeStack.count > 0 ]
                                    $[ let fieldNamePrefix = "" ]
                                    $[ foreach item in secondaryAttributeStack ]
                                        $[ if item#first ]
                                            $[ let fieldNamePrefix = (item.attribute.entity.name|uncapitalize) + "_" ]
                                        $[ else ]
                                            $[ let fieldNamePrefix += "_" ]
                                        $[/ if ]
                                        $[ let fieldNamePrefix = fieldNamePrefix + (item|name) ]
                                    $[/ foreach ]
                                    $[ let fieldName = fieldNamePrefix + "_" + fieldName ]
                                $[ else ]
                                    $[ let fieldName = (entity.name|uncapitalize) + "_" + domainAttribute.name ]
                                $[/ if ]
                                $[ switch domainAttribute.type ]
                                    $[ case date ]
                                        $[ capture textExpr ]#dates.format(${dtoVariable}.${domainAttribute.name}, 'dd-MMM-yyyy')$[/ capture ]
                                    $[ case enum ]
                                        $[ capture textExpr ]${fieldName}_text$[/ capture ]
                                    $[ default ]
                                        $[ capture textExpr ]${dtoVariable}.${domainAttribute.name}$[/ capture ]
                                $[/ switch ]
            <td th:text="${$}{${textExpr}}"$[ if domainAttribute#first ] scope="row"$[/ if ] style="width:auto"></td>
                            $[/ if ]
            <td style="width:1%">
                            $[ call checkIfAttributeIsEditable(attribute: domainAttribute.attribute)->(editable: editable) ]
                            $[ if editable ]
                                $[ let editModalType = "string" ]
                                $[ let valueVariableName = dtoVariable + "." + domainAttribute.name ]
                                $[ switch domainAttribute.attribute.type ]
                                    $[ case date ]
                                        $[ capture valueVariableName ]#dates.format(${dtoVariable}.${domainAttribute.name}, 'dd-MMM-yyyy')$[/ capture ]
                                        $[ let editModalType = "date" ]
                                    $[ case boolean ]
                                        $[ let editModalType = "boolean" ]
                                    $[ case enum ]
                                        $[ let enumAttributeName = entityVariablePrefix + "_" + domainAttribute.name ]
                                        $[ if secondaryAttributeStack != null && secondaryAttributeStack.count > 0 ]
                                            $[ let fieldNamePrefix = "" ]
                                            $[ foreach item in secondaryAttributeStack ]
                                                $[ if !item#first ]
                                                    $[ let fieldNamePrefix += "_" ]
                                                $[ else ]
                                                    $[ let fieldNamePrefix = (item.attribute.entity.name|uncapitalize) + "_" ]
                                                $[/ if ]
                                                $[ let fieldNamePrefix += item|name ]
                                            $[/ foreach ]
                                            $[ let enumAttributeName = fieldNamePrefix + "_" + domainAttribute.name ]
                                        $[/ if ]
                                        $[ let editModalType = domainAttribute.attribute.type.name + "_" ]
                                        $[ let valueVariableName = enumAttributeName + "_enum_value" ]
                                        $[ if domainAttribute.attribute.isArray ]
                                            $[ let editModalType = editModalType + "Multi_" ]
                                            $[ let valueVariableName += "s" ]
                                        $[/ if ]
                                    $[ default ]
                                $[/ switch ]
                                $[ if secondaryAttributeStack != null && secondaryAttributeStack.count > 0 ]
                                    $[ capture canEditVariable ]canEdit${(secondaryAttributeStack.first()).domainEntity.entity|name}$[/ capture ]
                                $[ else ]
                                    $[ call writeAccessAttributes(entity: entity)->(attributeList: attributeList) ]
                                    $[ capture canEditVariable ]canEdit${entity|name}$[ if attributeList.contains(domainAttribute.attribute) ]_${domainAttribute.name}$[/ if ]$[/ capture ]
                                $[/ if ]
                                $[ let fieldName = domainAttribute|name ]
                                $[ if secondaryAttributeStack != null && secondaryAttributeStack.count > 0 ]
                                    $[ let fieldNamePrefix = "" ]
                                    $[ foreach item in secondaryAttributeStack ]
                                        $[ if !item#first ]$[ let fieldNamePrefix += "." ]$[/ if ]
                                        $[ let fieldNamePrefix += item|name ]
                                    $[/ foreach ]
                                    $[ let fieldName = fieldNamePrefix + "." + fieldName ]
                                $[/ if ]
            <button th:if="${$}{${canEditVariable}}" type="button" class="btn btn-primary"
                data-bs-toggle="modal" data-bs-target="#${editModalType}EditModal" data-bs-field-name="${fieldName}"
                data-bs-field-title="${domainAttribute|title}"
                th:attr="data-bs-field-value=${$}{${valueVariableName}}">Edit</button>
                            $[/ if ]
            </td>
		</tr>
                        $[/ if ]
                    $[/ if ]
                $[/ foreach ]
        <!-- Relationships -->
                $[ foreach domainRelationship in domainEntity.declaredDomainRelationships ]
                    $[ if domainRelationship.to.isOne ]
                        $[ let toEntity = domainRelationship.to.entity ]
                        $[ if !domainRelationship.hasTag("display:attribute") ]
                            $[ continue ]
                        $[/ if ]
                        $[ let displayAttributeName = domainRelationship.tagValue("display:attribute") ]
                        $[ let valueVariableField = dtoVariable + "." + domainRelationship.name ]
                        $[ let valueVariableName = valueVariableField + "." + displayAttributeName ]
                        $[ capture canEditVariable ]canEdit${entity|name}$[/ capture ]
		<tr>
			<th th:text="#{${entity|domain:StaticLocalization|name}.${domainRelationship|domain:StaticLocalization|name}}" scope="col" style="width:${fieldWidthStyle}">${domainRelationship|title}</th>
                        $[ if optShowMarkdownIcon ]
            <td></td>
                        $[/ if ]
			<td th:text="${$}{${valueVariableField}==null?'':${valueVariableName}}"$[ if domainRelationship#first ] scope="row"$[/ if ] style="width:auto"></td>
			<td style="width:auto">
            <button th:if="${$}{${canEditVariable}}" type="button" class="btn btn-primary"
                data-bs-toggle="modal" data-bs-target="#${domainRelationship.name}_EditModal" data-bs-field-name="${domainRelationship|name}"
                data-bs-field-title="${domainRelationship|title}"
                th:attr="data-bs-field-value=${$}{${valueVariableField}==null?'':${valueVariableName}}">Edit</button>
            </td>
		</tr>
                    $[/ if ]
                $[/ foreach ]
		</tbody>
		</table>
            $[/ function ]
$[*-----------------------------------------------------------------------------------------------------------------*]
            $[ call tableForEntity(dtoVariable: entity|domain:JSONDTO|name|uncapitalize, optShowMarkdownIcon: optShowMarkdownIcon, entity: entity, secondaryAttributeStack: null) ]
            $[ call insertDateEditModalHTML() ]
            $[ call insertStringEditModalHTML() ]
            $[ call insertBooleanEditModalHTML() ]
$[* Add HTML for Enums (both single and array (many)), don't allow duplicates *]
            $[ let singleEnumsInserted = @[]@ ]
            $[ let manyEnumsInserted = @[]@ ]
            $[ foreach domainAttribute in domainEntity.getFlatDeclaredAttributeList(@["enum","entity"]@) ]
                $[ if domainAttribute.type.isEnumType ]
                    $[ if domainAttribute.attribute.isArray ]
                        $[ if !manyEnumsInserted.contains(domainAttribute.type) ]
                            $[ call insertManyEnumEditModalHTML(attribute: domainAttribute.attribute) ]
                            $[ do manyEnumsInserted.add(domainAttribute.type) ]
                        $[/ if ]
                    $[ else ]
                        $[ if !singleEnumsInserted.contains(domainAttribute.type) ]
                            $[ call insertEnumEditModalHTML(attribute: domainAttribute.attribute) ]
                            $[ do singleEnumsInserted.add(domainAttribute.type) ]
                        $[/ if ]
                    $[/ if ]
                $[ elseif domainAttribute.type.isEntityType ]
                    $[ let secondaryEntity = domainAttribute.attribute.typeEntity ]
                    $[ if secondaryEntity.hasTag("asset:file") ]
                        $[ call insertFileUploadModalHTML() ]
                    $[/ if ]
                $[/ if ]
            $[/ foreach ]
$[* Treat to-one relationships like attributes assigned to an object of the relationships entity *]
            $[ foreach domainRelationship in domainEntity.declaredDomainRelationships if domainRelationship.hasTag("detail") ]
                $[ if domainRelationship.to.isOne ]
                    $[ call insertEntitySelectModalHTML(relationship: domainRelationship.relationship) ]
                $[/ if ]
            $[/ foreach ]
	</div>
            $[ foreach relationship in domainEntity.declaredDomainRelationships if relationship.hasTag("detail") ]
                $[ if relationship.isOneToMany || relationship.isManyToMany ]
                    $[ let toEntity = relationship.to.entity ]
                    $[ if toEntity == null ]$[ log fatal ]Something is wrong with relationship ${relationship|fullname}!$[/ log ]$[/ if ]
    <!-- -->
	<!-- Table for Relationship: ${relationship|name} -->
    <!-- -->
    <hr/>
	<div class="container">
                    $[ if relationship.isOneToMany ]
	    <!-- Button for adding a sub-object -->
	    <div class="container g-0" th:if="${$}{!#lists.isEmpty(${relationship.name}List) || canAdd${toEntity|name}}">
            <div class="row">
                <div class="col-md-auto">
     	            <h3>${relationship|title}</h3>
                </div>
                        $[ if toEntity.hasPrimaryParentRelationship ]
                            $[ let actionUrl = (toEntity|domain:APIPath|name) + "/add" + "/{id}(id=${" + entityDtoClassName + ".id})" ]
                <div class="col-md-auto ms-auto">
                    <form th:if="${$}{canAdd${toEntity|name}}" th:action="@{${adminUrlPrefix}/${actionUrl}}" method="post">
                        <input type="submit" name="${toEntity.name}add" id="${toEntity.name}-add"
                               class="btn btn-primary" value="+" />
                    </form>
                </div>
                        $[/ if ]
            </div>
        </div>
                    $[ elseif relationship.isManyToMany ]
        <div class="container g-0 row">
            <div class="col-md-auto">
                <h3>${relationship|title}</h3>
            </div>
        </div>
                    $[/ if ]
	    <!-- The table -->
		<table class="table" th:unless="${$}{#lists.isEmpty(${relationship.name}List)}">
		<thead>
		<tr>
                    $[ foreach attribute in toEntity.declaredDomainAttributes ]
                        $[ if attribute.hasTag("summary") ]
		  <th th:text="#{${toEntity|domain:StaticLocalization|name}.${attribute|domain:StaticLocalization|name}}" scope="col" style="width:auto">${attribute|title}</th>
                        $[/ if ]
                    $[/ foreach ]
                    $[ foreach toEntityRelationship in toEntity.declaredDomainRelationships ]
                        $[ if toEntityRelationship.hasTag("summary") ]
	      <th th:text="#{${toEntity|domain:StaticLocalization|name}.${toEntityRelationship|domain:StaticLocalization|name}}" scope="col" style="width:auto">${toEntityRelationship|title}</th>
                        $[/ if ]
                    $[/ foreach ]
          <th th:text="Action" style="width:1%">Action</th>
        </tr>
		</thead>
		<tbody>
		<tr th:each="item : ${$}{${relationship.name}List}">
                    $[ foreach attribute in toEntity.declaredDomainAttributes ]
                        $[ if attribute.hasTag("summary") ]
                            $[ switch attribute.type ]
                                $[ case date ]
            <td th:text="${$}{#dates.format(item.${attribute.name}, 'dd-MMM-yyyy')}"$[ if attribute#first ] scope="row"$[/ if ] style="width:auto"></td>
                                $[ case enum ]
            <td th:text="${$}{item.${attribute.name}.title}"$[ if attribute#first ] scope="row"$[/ if ] style="width:auto"></td>
                                $[ default ]
            <td th:text="${$}{item.${attribute.name}}"$[ if attribute#first ] scope="row"$[/ if ] style="width:auto"></td>
                            $[/ switch ]
                        $[/ if ]
                    $[/ foreach ]
                    $[ foreach toEntityRelationship in toEntity.declaredDomainRelationships ]
                        $[ if toEntityRelationship.hasTag("summary") ]
                            $[ capture relItemExpr ]item.${toEntityRelationship.name}.${(toEntityRelationship|domain:AdminUI).tagValue("display:attribute")}$[/ capture ]
                            $[ if toEntityRelationship.isOptional ]
                                $[ capture relItemExpr ]item.${toEntityRelationship.name} != null ? ${relItemExpr} : ''$[/ capture ]
                            $[/ if ]
            <td th:text="${$}{${relItemExpr}}"></td>
                        $[/ if ]
                    $[/ foreach ]
            <td style="width:1%"><a class="btn btn-secondary active" role="button" aria-pressed="true" th:href="@{'${adminUrlPrefix}/${toEntity|domain:APIPath|name}/' + ${$}{item.id} + '/detail'}">Open</a></td>
		</tr>
		</tbody>
		</table>
	</div>
                $[ elseif relationship.relationship.isManyToMany ]
                    $[ log info ]UNSUPPORTED: Many to Many Picker not supported.$[/ log ]
    <!-- put many to many picker here -->
                $[/ if ]
            $[/ foreach ]
    <br/>
    <div>
        <button th:if="${$}{canEdit${entity|name}}" type="button" class="btn btn-danger"
        data-bs-toggle="modal" data-bs-target="#confirm-delete">Delete ${entity|title}</button>
    </div>
    <br/>
  </div>
</div>
<div class="modal fade" id="confirm-delete" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form th:action="@{${adminUrlPrefix}/${entity|domain:APIPath|name}/{id}/delete(id=${$}{${entity|domain:JSONDTO|name|uncapitalize}.id})}" method="POST">
        <div class="modal-content">
            <div class="modal-header">
                Delete ${entity|title}
            </div>
            <div class="modal-body">
                Are you sure you want to delete this ${entity|title}?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <input type="submit"  class="btn btn-danger" value="Delete" />
            </div>
        </div>
        </form>
    </div>
</div>
<script>
</script>
            $[ call insertDateEditModalScript() ]
            $[ call insertStringEditModalScript() ]
            $[ call insertBooleanEditModalScript() ]
            $[ let singleEnumsInserted = @[]@ ]
            $[ let manyEnumsInserted = @[]@ ]
            $[ foreach domainAttribute in domainEntity.getFlatDeclaredAttributeList(@["enum","entity"]@) ]
                $[ if domainAttribute.type.isEnumType ]
                    $[ if domainAttribute.attribute.isArray ]
                        $[ if !manyEnumsInserted.contains(domainAttribute.type) ]
                            $[ call insertManyEnumEditModalScript(attribute: domainAttribute.attribute) ]
                            $[ do manyEnumsInserted.add(domainAttribute.type) ]
                        $[/ if ]
                    $[ else ]
                        $[ if !singleEnumsInserted.contains(domainAttribute.type) ]
                            $[ call insertEnumEditModalScript(attribute: domainAttribute.attribute) ]
                            $[ do singleEnumsInserted.add(domainAttribute.type) ]
                        $[/ if ]
                    $[/ if ]
                $[ elseif domainAttribute.type.isEntityType ]
                    $[ let secondaryEntity = domainAttribute.attribute.typeEntity ]
                    $[ if secondaryEntity.hasTag("asset:file") ]
                        $[ call insertFileUploadModalScript() ]
                    $[/ if ]
                $[/ if ]
            $[/ foreach ]
            $[ foreach domainRelationship in domainEntity.declaredDomainRelationships ]
                $[ if domainRelationship.to.isOne ]
                    $[ call insertEntitySelectModalScript(relationship: domainRelationship.relationship) ]
                $[/ if ]
            $[/ foreach ]
</body>
</html>
        $[/ file ]
    $[/ foreach ]
$[/ publisher ]